{"version":3,"sources":["constant.js","Helper/network/index.js","Helper/urls/auth/index.js","Helper/urls/phone/index.js","Helper/urls/user/index.js","Helper/urls/medicalCondition/index.js","Helper/urls/medication/index.js","Helper/urls/common/index.js","Helper/urls/survey/index.js","Helper/urls/twilio/index.js","Helper/urls/article/index.js","Helper/urls/index.js","modules/events/index.js","modules/user/index.js","modules/articles/index.js","modules/program/index.js","modules/phone/index.js","modules/modals/index.js","modules/auth/index.js","modules/survey/index.js","modules/medical/index.js","modules/page/changePassword/index.js","config/index.js","modules/surveyTemplate/index.js","modules/page/EditProfile/index.js","modules/page/createSurvey/index.js","modules/page/changeProfilePic/index.js","modules/hospital/index.js","modules/page/Patientprofile/index.js","modules/medication/index.js","Helper/urls/event/index.js","modules/countryCity/index.js","modules/insuarnceProvider/index.js","modules/page/patientResponse/index.js","modules/page/doctorProfile/index.js","modules/successMsg/index.js","modules/twilio/index.js","modules/page/profileSetup/index.js","modules/product/index.js","modules/clinicalTestTemplates/index.js","modules/page/programDetails/index.js","modules/index.js","i18n/locales/index.js","index.js"],"names":["__webpack_require__","d","__webpack_exports__","HOST","USER_CATEGORY","REQUEST_TYPE","PROFILE_SETUP_STAGE","path","GLOBAL_MODALS","APPOINTMENT_TYPE","EVENT_TYPE","REPEAT_TYPE","ACTIVITY_TYPE","REPEAT_OPTION","ENTITY","EVENT_ACTION","SEVERITY","DASHBOARD_MENU","USER_STATUS","DAYS","GRID_GUTTER","DISPLAY_TYPE","OPTION_TYPE","SURVEY_STATUS","EVENT","MEDICALS_OPTIONS","PATIENT_PROFILE_TAB","MODE","PATIENTDASHBOARD","BASICFIELD","VITALFIELD","ALL_SORT_BY","DOCUMENT_FILTER_TYPE","SURVEYS","ARTICLES","VALIDITY","SEARCH_RESULT_TAB","DOCTOR","PATIENT","PROGRAM_ADMIN","CARE_COACH","POST","GET","PUT","DELETE","UPLOAD_CONSENT_FORM","UPLOAD_ID_PROOF","SETUP_PROFILE","DASHBOARD","CONSENT_FORM","ID_PROOF","EDIT_PROFILE","CALENDAR_SYNC","MY_PROFILE","CHANGE_PASSWORD","PROFILE_SETUP","SIGN_IN","FORGOT_PASSWORD","RESET_PASSWORD","IDENTIFY","SIGN_UP","LANDING_PAGE","HOME","ONLY_CALENDAR","CALENDAR","PROGRAMS","ONLY_SURVEYS","ONLY_MEDICALS","MEDICALS","SEARCH","PROGRAM_DETAILS","PROGRAM_SUMMARY","ROOT","PROFILE","CREATESURVEYDETAIL","PREVIEWQUESTIONNAIRE","SURVEYDETAIL","PATIENT_RESPONSE","REMOTE_CONSULTING","ARTICLE","DETAILS","APPOINTMENT_HISTORY","EVENT_MODAL","PATIENT_MODAL","DOCTOR_MODAL","DISCHARGE_PATIENT","HISTORICAL_CLINICAL_READING","CANCEL_APPOINTMENT","CANCEL_REMINDER","MEDICATION","CLINICALREADING","ADVERSE_EVENTS","HISTORICAL_VITALS_READING","HISTORICAL_MEDICATION_DATA","DOCUMENTS_MODAL","PRESCRIPTION","END_SURVEY","ADVERSE_EVENT_IMAGE_MODAL","ARTICLE_SHARE_TO_PATIENTS","ARTICLE_SHARE_WITH","FOLLOWUP","MATERIAL_DELIVERY","ALL","APPOINTMENT","REMINDER","APPOINTMENTS","REMINDERS","NONE","DAILY","WEEKLY","MONTHLY","YEARLY","VISIT","CALL","CHAT","label","key","PROGRAM","EDIT_NOTES","RESCHEDULE","EDIT_REMINDER","ADD_NOTES","DELETE_REMINDER","MILD","MODERATE","SEVERE","VERY_SEVERE","FATAL","ENROLLED","DISCHARGED","INACTIVE","xs","sm","md","lg","xl","xxl","READONLY","WRITABLE","RESPONSE","TEXT","STAR","RADIO","CHECKBOX","COMPLETED","INPROGRESS","ACTIVITY_MODE","VIDEO","STATUS","PENDING","PASSED","STARTED","BASIC","VITAL","CLINICAL_READING","ADVERSEEVENTS","MEDICAL_DETAILS","READ","WRITE","CHIEF_COMPLAINT","ALLERGIES","SURGERIES_OR_FRACTURE","OTHERS","TEMPERATURE_UNIT","TEMPERATURE","RESPIRATION_RATE","PULSE","BLOOD_PRESSURE","TEMPERATURE_UNIT_C","TEMPERATURE_UNIT_F","NAME","RECENTLY_UPDATED","LOCATION","DATE_ADDED","DATE_SENT","MOST_POPULAR","NOT_CONSENTED","NOT_VERIFIED","ALL_TEMPLATES","RECOMMENDED","FAVOURITES","ACTIVE","EXPIRE","Program","Patient","Doctor","doRequest","_ref","Object","_Users_yraj_lts_code_remotepatientmonitoring_client_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_Users_yraj_lts_code_remotepatientmonitoring_client_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","requestdata","defaultHeader","_requestdata$headers","headers","_requestdata$method","method","_requestdata$url","url","_requestdata$baseURL","baseURL","_requestdata$params","params","_requestdata$data","data","onUploadProgress","requestConfig","response","errrorResponse","wrap","_context","prev","next","assign","xsrfCookieName","xsrfHeaderName","axios","sent","abrupt","t0","stop","this","_x","apply","arguments","getSignUpURL","getOnAppStartURl","getSignInURL","getSignOutURL","getValidateLinkURL","getForgotPasswordURL","addPatientURL","addDoctorURL","getSendOtpURL","getVerifyOtpURL","getEditProfileURL","length","undefined","getUserByIdURL","userId","concat","getMyProfileURL","getChangeProfilePicURL","getChangePasswordURL","getUploadConsentFormURL","getUploadIdProofURL","getInsuranceProvidersURL","getRelatedMembersURL","getProgramsURL","getProgramDoctorsURL","programId","getProgramPatientsURL","getCurrentProgramUrl","getProductsURL","getDoctorHospitalsURL","doctorId","getHospitalsURL","getDischargePatientURL","verifyDocumentURL","fetchCareCoachSurveyURL","reUploadIdProofsURL","reUploadConsentDocsURL","getHistoricalClinicalReadingURL","getHistoricalVitalsReadingURL","getHistoricalMedicationDataURL","getEditBasicConditionURL","medicalConditionId","getAddVitalURL","getUpdateClinicalReadingURL","getAddMedicationURL","getRemoveMedicationURL","getRecentMedicationURL","getUploadURL","getSurveyTemplateListURL","getTemplatesQuestionURL","surveyID","getCreateSurveyURL","getFetchSurveyByStatusURL","status","getFetchSurveyPaticipantCompletedURL","surveyId","getUpdateSurveyCompletedURL","getSurveyTemplateProgramURL","templateId","getSurveyEndURL","getSurveyByIdURL","getAddParticipantResponseURL","downloadSurveyReport","getFetchParticicpantByStatusURL","getFetchPatientResponURL","pateintId","getRecentlySentSurveysURL","getTwilioVideoAccessToken","getTwilioChatAccessToken","getConnectedParticipants","roomId","getArticleByIdURL","articleId","getShareArticleURL","getArticleParticipantsURL","getArticlesURL","makeFavouriteUnfavouriteURL","auth_namespaceObject","phone_namespaceObject","user_namespaceObject","urls_event","medicalCondition_namespaceObject","common_namespaceObject","medication_namespaceObject","survey_namespaceObject","twilio_namespaceObject","article_namespaceObject","intialState","FETCH_ADVERSE_EVENT_COMPLETED","CANCEL_APPOINTMENT_COMPLETED","CANCEL_APPOINTMENT_COMPLETED_WITH_ERROR","CANCEL_REMINDER_COMPLETED","CANCEL_REMINDER_COMPLETED_WITH_ERROR","EDIT_NOTES_COMPLETED","EDIT_NOTES_COMPLETED_WITH_ERROR","RESCHEDULE_COMPLETED","RESCHEDULE_COMPLETED_WITH_ERROR","fetchEventsData","startDate","endDate","_Users_yraj_lts_code_remotepatientmonitoring_client_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","_Users_yraj_lts_code_remotepatientmonitoring_client_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default","dispatch","payload","type","Event","getAppointments","error","fetchEventUsers","eventId","_ref2","_callee2","_context2","getEventUsers","users","_x2","fetchAdverseEvent","_ref3","_callee3","_context3","getFetchAdverseEvent","_x3","fetchAppointmentsHistory","_ref4","_callee4","_context4","query","getAppointmentsHistory","_x4","cancelAppointment","all","reason","_ref5","_callee5","_context5","getCancelAppointment","_Users_yraj_lts_code_remotepatientmonitoring_client_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_5__","message","id","_x5","cancelReminder","_ref6","_callee6","_context6","getCancelReminderURL","_x6","setAppointmentStatus","details","_ref7","_callee7","eventStatus","_context7","setAppointmentStatusURL","_x7","editReminder","_ref8","_callee8","fields","_context8","_Users_yraj_lts_code_remotepatientmonitoring_client_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","getEditReminderURL","_x8","editNotesReminder","_ref9","_callee9","notes","_context9","getEditNotesReminderURL","_x9","reschedule","_ref10","_callee10","_context10","getRescheduleAppointmentURL","_x10","editNotes","_ref11","_callee11","_context11","getEditNotesURL","_x11","pollEventsData","_ref12","_callee12","_context12","getLastEditedEvent","_x12","addVideoRoomParticipantsInEvent","userOne","userTwo","_ref13","_callee13","_context13","addVideoRoomParticipantsURL","_x13","state","action","_action$payload","_state$events4","events","currentEvent","oldData","newData","updatedEvent","_Users_yraj_lts_code_remotepatientmonitoring_client_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_3__","onEditNotesComplete","_data$events","upcomingEvents","_data$appointments","appointments","upcomingAppointments","_data$scheduleEventLi","scheduleEventListByDate","upcomingScheduleEventListByDate","_state$events","_state$appointments","newEvents","newAppointments","newScheduleEventListByDate","setEvents","_data$events3","_data$appointmentHist","appointmentHistory","upcomingApptHistory","_data$historyIds","historyIds","upcomingHistoryId","_state$events3","_state$historyIds","_state$appointmentHis","newAppointmentHistory","newHistoryIds","Set","_Users_yraj_lts_code_remotepatientmonitoring_client_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_4__","setAppointmentsHistory","_data$events4","adverseEvent","_state$events5","oldEvents","_state$adverseEvent","oldAdverseEvent","newadverseEvent","setAdverseEventData","lastUpdatedAt","updatedAt","setLastUpdatedAt","_data$events2","_state$events2","updateEvent","DISCHARGE_PATIENT_REQUEST","DISCHARGE_PATIENT_REQUEST_COMPLETED","DISCHARGE_PATIENT_REQUEST_COMPLETED_WITH_ERROR","VERIFY_DOCUMENT_REQUEST","VERIFY_DOCUMENT_REQUEST_COMPLETED","VERIFY_DOCUMENT_REQUEST_COMPLETED_WITH_ERROR","REUPLOAD_IDPROOF_REQUEST","REUPLOAD_IDPROOF_REQUEST_COMPLETED","REUPLOAD_IDPROOF_REQUEST_COMPLETED_WITH_ERROR","REUPLOAD_CONSENTFORM_REQUEST","REUPLOAD_CONSENTFORM_REQUEST_COMPLETED","REUPLOAD_CONSENTFORM_REQUEST_COMPLETED_WITH_ERROR","initialState","setUsersData","userIds","keys","prevUsers","_Users_yraj_lts_code_remotepatientmonitoring_client_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_3__","newState","forEach","user","_Users_yraj_lts_code_remotepatientmonitoring_client_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__","baseDocUrl","config","BASE_DOC_URL","setIndividualUser","discharge","ids","getState","User","verify","proofs","reUploadIdProofs","idProofs","docs","reUploadConsentDocs","consentDocs","_action$userId","CHANGING_PROFILE_PIC_COMPLETED","profilePicUrl","allUsers","currentUsers","basicInfo","newBasicInfo","profilePicLink","updatedData","err","changeCurrentUserProfilePic","SAVING_USER_COMPLETED","isProfileCompleted","SENDING_OTP_COMPLETED","VERIFYING_OTP_COMPLETED","_data$contactNo","contactNo","personalInfo","newContact","newPerSonalInfo","changeContactNo","currentUser","documents","newDocuments","consentFormVerified","idProofVerified","changeDocumentVerificationStatus","updateUserDocuments","updatedUsers","updateUserStatusToDischarged","MAKE_FAVOURITE_UNFAVOURITE_COMPLETE","FETCHING_ARTICLE_BY_ID_COMPLETED_WITH_ERROR","SHARING_ARTICLE","SHARING_ARTICLE_COMPLETED","SHARING_ARTICLE_COMPLETED_WITH_ERROR","fetchArticleParticipants","_response","Article","fetchArticlesById","_response2","shareArticle","participants","_response3","_Users_yraj_lts_code_remotepatientmonitoring_client_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","makeFavouriteUnfavourite","isFavourite","_getState","articles","console","log","fetchArticles","newArticles","setArticleStateOnfavouriteUnfavourite","setArticles","FETCHING_PROGRAMS_DATA_COMPLETED_WITH_ERROR","FETCHING_CURRENT_PROGRAM_DETAILS_COMPLETED","FETCHING_CURRENT_PROGRAM_DETAILS_COMPLETED_WITH_ERROR","setPrograms","programs","programIds","prevPrograms","program","setindividualProgram","fetchProgramsData","fetchProgramDoctorsForModal","fetchProgramDoctors","fetchProgramPatient","filterBy","sortBy","fetchProgramPatients","getProgramPatientsUrl","fetchCurrentProgram","clearCurrentPrograms","isError","reset","sendOtp","Phone","_Users_yraj_lts_code_remotepatientmonitoring_client_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","verified","verifyOtp","otp","show_otp_modal","is_otp_verifying","is_otp_verified","is_otp_error","otp_error","is_sending_otp","is_otp_send","CREATING_APPOINTMENT_REQUEST_COMPLETED","CREATING_REMINDER_REQUEST_COMPLETED","CREATING_ADVERSE_EVENT_REQUEST_COMPLETED","show","open","modalType","entityId","purpose","close","clearMsg","addAppointment","getAddAppointmentURL","addReminder","getAddReminderURL","reportAdverseEvent","getCreateAdverseEventURL","subentity","requesting","CHANGING_PASSWORD_COMPLETED","is_error","SIGNING_COMPLETED","SIGNING_UP_COMPLETED","GETTING_INITIAL_DATA_COMPLETED","intial_state","getRedirectLink","isIdProofUploaded","isConsentFormUploaded","isCalendarSynced","settings","category","redirectTo","resetUnauthorizedError","clearError","signIn","_getState$auth","auth","_data$lastUrl","lastUrl","_response$payload$dat","_id","authRedirection","Auth","unauthorizedError","authenticatedUser","signOut","validateLink","email","invitationLink","link","onAppStart","countries","countryCities","country","signUp","_data","authenticated","authenticated_user","_Users_yraj_lts_code_remotepatientmonitoring_client_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_2__","validLink","FETCHING_SURVEY_TEMPLATE_PROGRAM_COMPLETED_WITH_ERROR","FETCHING_SURVEY_TEMPLATES_COMPLETED_WITH_ERROR","FETCHING_SURVEYS_BY_ID_COMPLETED_WITH_ERROR","setUnauthorizedError","unsetUnathorizedError","CREATING_SURVEYS_COMPLETED","setSurvey","surveys","prevsurveys","createSurveys","Survey","updateSurveys","fetchSurveys","Status","fetchCareCoachSurveys","fetchSurveysById","endSurveys","addResponse","completedOn","fetchPaticipantForSurveyBasedOnStatus","fetchRecentlySentSurveys","statuses","JSON","stringify","is_created","participantsId","_Users_yraj_lts_code_remotepatientmonitoring_client_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","recentSurveys","recentlyAdded","setRecentSurveys","SAVING_BASIC_CONDITION_COMPLETED","SAVING_VITAL_COMPLETED","SAVING_CLINICAL_READING_COMPLETED","saveBasicConditionData","medicalCondition","basicCondition","Error","addVitalData","vital","UpdateClinicalReadingData","clinicalReadings","updateAt","moment","format","testName","clinicalReading","medicalsData","setMedicalsData","changePassword","is_password_changing","is_password_changed","is_changing_password_error","change_password_error","parse","process","BASE_URL","setSurveyTemplates","templates","prevtemplates","fetchSurveyTemplates","openProfilePicModal","closeProfilePicModal","openOtpModal","closeOtpModal","saveUserData","fetchUser","user_id","currentUserId","initial_state","show_profile_pic_modal","success_msg","is_profile_saved","is_profile_error","profile_error","isLoading","current_user_id","fetchQuestions","surveyTemplateId","getValidProgramForSurvey","store","surveytemplates","careCoachPrograms","selectedTemplate","_selectedTemplate$pro","selectedTemplateProgram","intersectionOfProgram","_response$payload","_payload$data$surveyD","surveyProgram","availableProgram","intersection","surveyDetail","map","singleSurvey","filter","includes","questions","_action$programId","setQuestions","setAvailableProgramForSurvey","patients","setProgramPatients","changeProfilePic","Content-Type","pic_url","fetchDoctorHospitals","fetchHospitals","countryId","cityId","currentState","doctorHospitalsData","hospitalData","newDoctorHospitalsData","setDoctorHospitals","newHospitalsData","setHospitals","hospitals","prevHospital","setIntialHospitalData","fetchPatient","is_loading","is_data_loaded","setAdverseEvent","getRecentMedication","medication","addMedication","value","removeMedication","productId","medicine","setMedication","r","getEventDataById","getBookedSlotsURL","getCountries","_Users_yraj_lts_code_remotepatientmonitoring_client_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_3__","_Users_yraj_lts_code_remotepatientmonitoring_client_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2___default","countryList","getCities","_Users_yraj_lts_code_remotepatientmonitoring_client_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__","cities","countriesData","newCountriesData","addCities","_countryCities$countr","newList","_countryCities$cities","_state$countries","prevList","_state$cities","prevData","setCountryCitiesData","setInsuranceData","insuranceProviders","fetchInsuranceData","fetchPatientresponse","patientId","responses","fetchDoctor","_modals__WEBPACK_IMPORTED_MODULE_0__","_events__WEBPACK_IMPORTED_MODULE_1__","_medical__WEBPACK_IMPORTED_MODULE_2__","_articles__WEBPACK_IMPORTED_MODULE_3__","_user__WEBPACK_IMPORTED_MODULE_4__","_survey__WEBPACK_IMPORTED_MODULE_5__","_page_changePassword__WEBPACK_IMPORTED_MODULE_6__","msg","fetchVideoAccessToken","Twilio","fetchChatAccessToken","identity","device","_data$identity","_data$token","token","videoToken","setTwilioAccessToken","_data$token2","chatToken","setTwilioChatAccessToken","current","saveUserConsentForm","saveUserIdProof","is_saving","is_saved","_payload$users","_ref5$basicInfo","page","combineReducers","editProfile","profileSetUp","patientProfile","doctorProfile","createSurvey","programDetails","patientResponse","modules","phone","medicals","medications","products","objectSpread","setProducts","modal","twilio","clinicalTestTemplates","setClinicalTestTemplate","successMsg","locales","en","ar","hi","window","Mobile","lazy","Promise","e","then","bind","Desktop","createStore","allReducers","applyMiddleware","thunk","addLocaleData","arLocaleData","esLocaleData","hiLocalData","locale","location","search","replace","messages","translations","sw","screen","width","ReactDOM","render","react_default","createElement","es","index_es","react","fallback","document","getElementById"],"mappings":"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","file":"static/js/main.9d9f9cbf.chunk.js","sourcesContent":["export const HOST = \"/api\";\n//user category\n\nexport const USER_CATEGORY = {\n  DOCTOR: \"doctor\",\n  PATIENT: \"patient\",\n  PROGRAM_ADMIN: \"programAdmin\",\n  CARE_COACH: \"careCoach\"\n};\n\n//request type\nexport const REQUEST_TYPE = {\n  POST: \"post\",\n  GET: \"get\",\n  PUT: \"put\",\n  DELETE: \"delete\"\n};\n\nexport const PROFILE_SETUP_STAGE = {\n  UPLOAD_CONSENT_FORM: 0,\n  UPLOAD_ID_PROOF: 1,\n  SETUP_PROFILE: 2,\n  DASHBOARD: 3\n};\n\nexport const path = {\n  CONSENT_FORM: \"/consent-from\",\n  ID_PROOF: \"/id-proof\",\n  EDIT_PROFILE: \"/edit-profile\",\n  CALENDAR_SYNC: \"/calendar-sync\",\n  MY_PROFILE: \"/my-profile\",\n  CHANGE_PASSWORD: \"/change-password\",\n  PROFILE_SETUP: \"/profile-setup\",\n  SIGN_IN: \"/sign-in\",\n  ARTICLES: \"/articles\",\n  FORGOT_PASSWORD: \"/forgot-password\",\n  RESET_PASSWORD: \"/reset-password/:link\",\n  IDENTIFY: \"/identify/:link\",\n  SIGN_UP: \"/sign-up/:link\",\n  LANDING_PAGE: \"/\",\n  DASHBOARD: {\n    DASHBOARD: \"/\",\n    HOME: \"/dashboard\",\n    ONLY_CALENDAR: \"/calendar\",\n    CALENDAR: \"/calendar/:show\",\n    PROGRAMS: \"/programs\",\n    ONLY_SURVEYS: \"/surveys\",\n    SURVEYS: \"/surveys/:show\",\n    ONLY_MEDICALS: \"/medicals\",\n    MEDICALS: \"/medicals/:show\"\n  },\n  SEARCH: \"/search\",\n  PROGRAM_DETAILS: \"/program/:id\",\n  PROGRAM_SUMMARY: \"/program/:id/summary\",\n  ENTITY: {\n    ROOT: \"/:entity\",\n    PROFILE: \"/:entity/:id\",\n    EDIT_PROFILE: \"/:entity/:id/edit\"\n  },\n  CREATESURVEYDETAIL: \"/create-survey/template/:templateId\",\n  PREVIEWQUESTIONNAIRE: \"/survey/:templateId/questionnaire\",\n  SURVEYDETAIL: \"/survey/:surveyId\",\n  PATIENT_RESPONSE: \"/survey/:surveyId/participant/:participantId/response\",\n  REMOTE_CONSULTING: \"/remoteConsulting/:roomId\",\n  ARTICLE: {\n    ROOT: \"/articles\",\n    DETAILS: \"/articles/:articleId\"\n  },\n  APPOINTMENT_HISTORY: \"/appointment-history\"\n};\n\nexport const GLOBAL_MODALS = {\n  EVENT_MODAL: \"EVENT_MODAL\",\n  PATIENT_MODAL: \"PATIENT_MODAL\",\n  DOCTOR_MODAL: \"DOCTOR_MODAL\",\n  DISCHARGE_PATIENT: \"DISCHARGE_PATIENT\",\n  HISTORICAL_CLINICAL_READING: \"HISTORICAL_CLINICAL_READING\",\n  CANCEL_APPOINTMENT: \"CANCEL_APPOINTMENT\",\n  CANCEL_REMINDER: \"CANCEL_REMINDER\",\n  MEDICATION: \"MEDICATION\",\n  CLINICALREADING: \"CLINICALREADING\",\n  ADVERSE_EVENTS: \"ADVERSE_EVENTS\",\n  HISTORICAL_VITALS_READING: \"HISTORICAL_VITALS_READING\",\n  HISTORICAL_MEDICATION_DATA: \"HISTORICAL_MEDICATION_DATA\",\n  DOCUMENTS_MODAL: \"DOCUMENTS_MODAL\",\n  CHANGE_PASSWORD: \"CHANGE_PASSWORD\",\n  PRESCRIPTION: \"PRESCRIPTION\",\n  END_SURVEY: \"END_SURVEY\",\n  ADVERSE_EVENT_IMAGE_MODAL: \"ADVERSE_EVENT_IMAGE_MODAL\",\n  ARTICLE_SHARE_TO_PATIENTS: \"ARTICLE_SHARE_TO_PATIENTS\",\n  ARTICLE_SHARE_WITH: \"ARTICLE_SHARE_WITH\"\n};\n\nexport const APPOINTMENT_TYPE = {\n  FOLLOWUP: \"followup\",\n  MEDICATION: \"medication\",\n  MATERIAL_DELIVERY: \"material_delivery\"\n};\n\nexport const EVENT_TYPE = {\n  ALL: \"all\",\n  APPOINTMENT: \"appointment\",\n  REMINDER: \"reminder\",\n  APPOINTMENTS: \"appointments\",\n  REMINDERS: \"reminders\"\n};\n\nexport const REPEAT_TYPE = {\n  NONE: \"none\",\n  DAILY: \"daily\",\n  WEEKLY: \"weekly\",\n  MONTHLY: \"monthly\",\n  YEARLY: \"yearly\"\n};\n\nexport const ACTIVITY_TYPE = {\n  VISIT: \"visit\",\n  CALL: \"call\",\n  CHAT: \"chat\"\n};\n\nexport const REPEAT_OPTION = [\n  { label: \"Does not repeat\", key: REPEAT_TYPE.NONE },\n  { label: \"Repeats Daily\", key: REPEAT_TYPE.DAILY },\n  { label: \"Repeats Weekly\", key: REPEAT_TYPE.WEEKLY },\n  { label: \"Repeats Monthly\", key: REPEAT_TYPE.MONTHLY },\n  { label: \"Repeats Yearly\", key: REPEAT_TYPE.YEARLY }\n];\n\nexport const ENTITY = {\n  DOCTOR: \"doctor\",\n  PATIENT: \"patient\",\n  PROGRAM: \"program\"\n};\n\nexport const EVENT_ACTION = {\n  EDIT_NOTES: \"EDIT_NOTES\",\n  RESCHEDULE: \"RESCHEDULE\",\n  EDIT_REMINDER: \"EDIT_REMINDER\",\n  ADD_NOTES: \"ADD_NOTES\",\n  DELETE_REMINDER: \"DELETE_REMINDER\"\n};\n\nexport const SEVERITY = {\n  MILD: \"MILD\",\n  MODERATE: \"MODERATE\",\n  SEVERE: \"SEVERE\",\n  VERY_SEVERE: \"VERY_SEVERE\",\n  FATAL: \"FATAL\"\n};\n\nexport const DASHBOARD_MENU = {\n  HOME: \"dashboard\",\n  PROGRAMS: \"programs\",\n  CALENDAR: \"calendar\",\n  SURVEYS: \"surveys\",\n  MEDICALS: \"medicals\"\n};\n\nexport const USER_STATUS = {\n  ENROLLED: \"ENROLLED\",\n  DISCHARGED: \"DISCHARGED\",\n  INACTIVE: \"INACTIVE\"\n};\n\nexport const DAYS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\n//style\nexport const GRID_GUTTER = { xs: 0, sm: 16, md: 24, lg: 24, xl: 24, xxl: 24 };\n\nexport const DISPLAY_TYPE = {\n  READONLY: \"readonly\",\n  WRITABLE: \"writable\",\n  RESPONSE: \"response\"\n};\n\nexport const OPTION_TYPE = {\n  TEXT: \"TEXT\",\n  STAR: \"STAR\",\n  RADIO: \"RADIO\",\n  CHECKBOX: \"CHECKBOX\"\n};\n\nexport const SURVEY_STATUS = {\n  COMPLETED: \"COMPLETED\",\n  INPROGRESS: \"INPROGRESS\"\n};\n\nexport const EVENT = {\n  ACTIVITY_MODE: {\n    CALL: \"call\",\n    VISIT: \"visit\",\n    VIDEO: \"video\",\n    CHAT: \"chat\"\n  },\n  STATUS: {\n    PENDING: \"pending\",\n    PASSED: \"passed\",\n    COMPLETED: \"completed\",\n    STARTED: \"started\"\n  }\n};\n\nexport const MEDICALS_OPTIONS = {\n  BASIC: \"Basic\",\n  VITAL: \"Vital\",\n  CLINICAL_READING: \"Clinical Reading\",\n  CLINICALREADING: \"Clinical-Reading\",\n  MEDICATION: \"Medication\",\n  ADVERSE_EVENTS: \"Adverse Event\",\n  ADVERSEEVENTS: \"Adverse-Event\"\n};\n\nexport const PATIENT_PROFILE_TAB = {\n  CALENDAR: \"Calendar\",\n  MEDICAL_DETAILS: \"Medical-Details\"\n};\n\nexport const MODE = {\n  READ: \"read\",\n  WRITE: \"write\"\n};\n\nexport const PATIENTDASHBOARD = \"patient-dashboard\";\n\nexport const BASICFIELD = {\n  CHIEF_COMPLAINT: \"chiefComplaint\",\n  ALLERGIES: \"allergies\",\n  SURGERIES_OR_FRACTURE: \"surgeriesOrFracture\",\n  OTHERS: \"others\"\n};\n\nexport const VITALFIELD = {\n  TEMPERATURE_UNIT: \"temperatureUnit\",\n  TEMPERATURE: \"temperature\",\n  RESPIRATION_RATE: \"respirationRate\",\n  PULSE: \"pulse\",\n  BLOOD_PRESSURE: \"bloodPressure\",\n  TEMPERATURE_UNIT_C: \"c\",\n  TEMPERATURE_UNIT_F: \"f\"\n};\n\nexport const ALL_SORT_BY = {\n  NAME: \"Name\",\n  RECENTLY_UPDATED: \"Recently Updated\",\n  LOCATION: \"Location\",\n  DATE_ADDED: \"Date Added\",\n  DATE_SENT: \"Date Sent\",\n  MOST_POPULAR: \"Most Popular\"\n};\n\nexport const DOCUMENT_FILTER_TYPE = {\n  ALL: \"All\",\n  NOT_CONSENTED: \"Not Consented\",\n  NOT_VERIFIED: \"Not Verified\"\n};\n\nexport const SURVEYS = {\n  INPROGRESS: \"Inprogress\",\n  COMPLETED: \"Completed\",\n  ALL_TEMPLATES: \"AllTemplates\"\n};\n\nexport const ARTICLES = {\n  RECOMMENDED: \"Recommended\",\n  FAVOURITES: \"Favourites\"\n};\n\nexport const VALIDITY = {\n  ACTIVE: \"Active\",\n  EXPIRE: \"Expire\"\n};\n\nexport const SEARCH_RESULT_TAB = {\n  Program: \"Program\",\n  Patient: \"Patient\",\n  Doctor: \"Doctor\"\n};\n","import axios from \"axios\";\nimport { HOST } from \"../../constant\";\n\nexport const doRequest = async requestdata => {\n  const defaultHeader = {};\n\n  // timeout specifies the number of milliseconds before the request times out.\n  // If the request takes longer than timeout, the request will be aborted.\n  //const timeout = 5000; // default is 0 (no timeout)\n\n  // xsrfCookieName is the name of the cookie to use as a value for xsrf token\n  const xsrfCookieName = \"XSRF-TOKEN\"; // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  const xsrfHeaderName = \"X-XSRF-TOKEN\"; // default\n\n  const {\n    headers = {},\n    method = \"get\",\n    url = \"\",\n    baseURL = HOST,\n    params = {},\n    data = {},\n    onUploadProgress\n  } = requestdata;\n\n  //create request config according to data\n  const requestConfig = {\n    headers: Object.assign(defaultHeader, headers),\n    method,\n    url,\n    baseURL,\n    params,\n    data,\n    xsrfCookieName,\n    xsrfHeaderName,\n    onUploadProgress\n  };\n\n  try {\n    const response = await axios(requestConfig);\n    return response.data;\n  } catch (error) {\n    //safe check response.data is available or not\n    const errrorResponse = Object.assign({}, error.response.data);\n    return errrorResponse;\n  }\n};\n","export const getSignUpURL = () => {\n  return \"/sign-up\";\n};\n\nexport const getOnAppStartURl = () => {\n  return \"/get-basic-info\";\n};\n\nexport const getSignInURL = () => {\n  return \"/sign-in\";\n};\n\nexport const getSignOutURL = () => {\n  return \"/sign-out\";\n};\n\nexport const getValidateLinkURL = () => {\n  return \"/validate\";\n};\n\nexport const getForgotPasswordURL = () => {\n  return \"/not-define-yet\";\n};\n\nexport const addPatientURL = () => {\n  return \"/invite\"\n}\n\nexport const addDoctorURL = () => {\n  return \"/invite\"\n}\n","export const getSendOtpURL = () => {\n  return \"/send-otp\";\n};\n\nexport const getVerifyOtpURL = () => {\n  return \"/verify-otp\";\n};\n","// import changePassword from \"../../../Containers/page/changePassword\";\n\nexport const getEditProfileURL = (userId = \"\") => {\n  return \"/edit-profile\";\n};\n\nexport const getUserByIdURL = userId => {\n  return `/user/${userId}`;\n};\n\nexport const getMyProfileURL = (userId = \"\") => {\n  return \"/myprofile\";\n};\n\nexport const getChangeProfilePicURL = () => {\n  return \"/upload-profile-pic\";\n};\n\nexport const getChangePasswordURL = (userId = \"\") => {\n  return \"/change-password\";\n};\n\nexport const getUploadConsentFormURL = () => {\n  return \"/upload-consent-form\";\n};\n\nexport const getUploadIdProofURL = () => {\n  return `/upload-id-proof`;\n};\n\nexport const getInsuranceProvidersURL = () => {\n  return \"/insurance-providers\";\n};\n\nexport const getRelatedMembersURL = () => {\n  return \"/members\";\n};\nexport const getProgramsURL = () => {\n  return \"/programs\";\n};\n\nexport const getProgramDoctorsURL = programId => {\n  return `/program/${programId}/doctors`;\n};\n\nexport const getProgramPatientsURL = programId => {\n  return `/program/${programId}/patients`;\n};\n// export const getProgramPatientsUrl = programId => {\n//   return `/program/${programId}/patients`;\n// };\n\nexport const getCurrentProgramUrl = programId => {\n  return `/program/${programId}`;\n};\n\nexport const getProductsURL = programId => {\n  return `/products/${programId}`;\n};\n\nexport const getDoctorHospitalsURL = doctorId => {\n  return `/doctor/${doctorId}/hospitals`;\n};\n\nexport const getHospitalsURL = () => {\n  return \"/hospitals\";\n};\n\nexport const getDischargePatientURL = () => {\n  return `/patients/discharge`;\n};\n\nexport const verifyDocumentURL = userId => {\n  return `/users/${userId}/documents-verify`;\n};\n\nexport const fetchCareCoachSurveyURL = userId => {\n  return `/users/surveys`;\n};\n\nexport const reUploadIdProofsURL = userId => {\n  return `/users/${userId}/reupload-idproofs`;\n};\n\nexport const reUploadConsentDocsURL = userId => {\n  return `/users/${userId}/reupload-consentdocs`;\n};\n\nexport const getHistoricalClinicalReadingURL = userId => {\n  return `/patients/${userId}/clinical-readings`;\n};\n\nexport const getHistoricalVitalsReadingURL = userId => {\n  return `/patients/${userId}/vitals`;\n};\n\nexport const getHistoricalMedicationDataURL = userId => {\n  return `/patients/${userId}/medication`;\n};\n","export const getEditBasicConditionURL = medicalConditionId => {\n  return `/medicalCondition/${medicalConditionId}/basicCondition`;\n};\n\nexport const getAddVitalURL = medicalConditionId => {\n  return `/medicalCondition/${medicalConditionId}/vital`;\n};\n\nexport const getUpdateClinicalReadingURL = medicalConditionId => {\n  return `/medicalCondition/${medicalConditionId}/clinicalReading`;\n};\n","export const getAddMedicationURL = () => {\n  return \"/medication\";\n};\nexport const getRemoveMedicationURL = userId => {\n  return `users/${userId}/medication`;\n};\nexport const getRecentMedicationURL = userId => {\n  return `/patients/${userId}/medication/recent`;\n};\n","export const getUploadURL = () => {\n  return `/upload`;\n};\n","export const getSurveyTemplateListURL = () => {\n  return \"/surveyTemplate/list\";\n};\nexport const getTemplatesQuestionURL = surveyID => {\n  return `/survey/${surveyID}/questions`;\n};\nexport const getCreateSurveyURL = userId => {\n  return `/survey/create`;\n};\nexport const getFetchSurveyByStatusURL = status => {\n  return `/survey/status/${status}`;\n};\nexport const getFetchSurveyPaticipantCompletedURL = surveyId => {\n  return `/survey/${surveyId}/participants/status/completed`;\n};\nexport const getUpdateSurveyCompletedURL = surveyId => {\n  return `/survey/${surveyId}/update`;\n};\nexport const getSurveyTemplateProgramURL = templateId => {\n  return `/surveyTemplate/${templateId}/surveyprogram`;\n};\nexport const getSurveyEndURL = surveyId => {\n  return `/survey/${surveyId}/end`;\n};\nexport const getSurveyByIdURL = surveyId => {\n  return `/survey/${surveyId}`;\n};\nexport const getAddParticipantResponseURL = surveyId => {\n  return `/survey/${surveyId}/response`;\n};\nexport const downloadSurveyReport = surveyId => {\n  return `/survey/${surveyId}/download`;\n};\nexport const getFetchParticicpantByStatusURL = (surveyId, status) => {\n  return `/survey/${surveyId}/participants/status/${status}`;\n};\nexport const getFetchPatientResponURL = (surveyId, pateintId) => {\n  return `/survey/${surveyId}/participant/${pateintId}/response`;\n};\nexport const getRecentlySentSurveysURL = () => {\n  return `/survey/recentlySentSurveys`;\n};\n","export const getTwilioVideoAccessToken = () => {\n  return \"/getTwilioVideoAccessToken\";\n};\nexport const getTwilioChatAccessToken = () => {\n  return \"/getTwilioChatAccessToken\";\n};\nexport const getConnectedParticipants = roomId => {\n  return `/getConnectedParticipants/${roomId}`;\n};\n","export const getArticleByIdURL = articleId => {\n  return `/articles/${articleId}`;\n};\n\nexport const getShareArticleURL = articleId => {\n  return `/articles/${articleId}/share`;\n};\n\nexport const getArticleParticipantsURL = articleId => {\n  return `/articles/${articleId}/participants`;\n};\nexport const getArticlesURL = () => {\n  return \"/articles\";\n};\n\nexport const makeFavouriteUnfavouriteURL = articleId => {\n  return `/articles/${articleId}/favourite`;\n};\n","import * as Auth from \"./auth\";\nimport * as Phone from \"./phone\";\nimport * as User from \"./user\";\nimport * as Event from \"./event\";\nimport * as medicalCondition from \"./medicalCondition\";\nimport * as medication from \"./medication\";\nimport * as Common from \"./common\";\nimport * as Survey from \"./survey\";\nimport * as Dashboard from \"./dashboard\";\nimport * as Twilio from \"./twilio\";\nimport * as Article from \"./article\";\n\nexport {\n  Auth,\n  Phone,\n  User,\n  Event,\n  medicalCondition,\n  Common,\n  medication,\n  Survey,\n  Dashboard,\n  Twilio,\n  Article\n};\n","// import moment from \"moment\";\nimport { doRequest } from \"../../Helper/network\";\nimport { Event } from \"../../Helper/urls\";\nimport { REQUEST_TYPE } from \"../../constant\";\nconst intialState = {};\n\nconst FETCHING_EVENTS_DATA = \"FETCHING_EVENTS_DATA\";\nconst FETCHING_EVENTS_DATA_COMPLETED = \"FETCHING_EVENTS_DATA_COMPLETED\";\nconst FETCHING_EVENTS_DATA_COMPLETED_WITH_ERROR =\n  \"FETCHING_EVENTS_DATA_COMPLETED_WITH_ERROR\";\n\nconst FETCH_APPOINTMENTS_HISTORY = \"FETCH_APPOINTMENTS_HISTORY\";\nconst FETCH_APPOINTMENTS_HISTORY_COMPLETED =\n  \"FETCH_APPOINTMENTS_HISTORY_COMPLETED\";\nconst FETCH_APPOINTMENTS_HISTORY_COMPLETED_WITH_ERROR =\n  \"FETCH_APPOINTMENTS_HISTORY_COMPLETED_WITH_ERROR\";\n\nexport const FETCH_ADVERSE_EVENT_COMPLETED = \"FETCH_ADVERSE_EVENT_COMPLETED\";\n\nexport const CANCEL_APPOINTMENT = \"CANCEL_APPOINTMENT\";\nexport const CANCEL_APPOINTMENT_COMPLETED = \"CANCEL_APPOINTMENT_COMPLETED\";\nexport const CANCEL_APPOINTMENT_COMPLETED_WITH_ERROR =\n  \"CANCEL_APPOINTMENT_COMPLETED_WITH_ERROR\";\n\nexport const CANCEL_REMINDER = \"CANCEL_REMINDER\";\nexport const CANCEL_REMINDER_COMPLETED = \"CANCEL_REMINDER_COMPLETED\";\nexport const CANCEL_REMINDER_COMPLETED_WITH_ERROR =\n  \"CANCEL_REMINDER_COMPLETED_WITH_ERROR\";\n\nexport const SET_APPOINTMENT_STATUS = \"SET_APPOINTMENT_STATUS\";\nexport const SET_APPOINTMENT_STATUS_COMPLETED =\n  \"SET_APPOINTMENT_STATUS_COMPLETED\";\nexport const SET_APPOINTMENT_STATUS_COMPLETED_WITH_ERROR =\n  \"SET_APPOINTMENT_STATUS_COMPLETED_WITH_ERROR\";\n\nexport const EDIT_NOTES = \"EDIT_NOTES\";\nexport const EDIT_NOTES_COMPLETED = \"EDIT_NOTES_COMPLETED\";\nexport const EDIT_NOTES_COMPLETED_WITH_ERROR =\n  \"EDIT_NOTES_COMPLETED_WITH_ERROR\";\n\nexport const RESCHEDULE = \"RESCHEDULE\";\nexport const RESCHEDULE_COMPLETED = \"RESCHEDULE_COMPLETED\";\nexport const RESCHEDULE_COMPLETED_WITH_ERROR =\n  \"RESCHEDULE_COMPLETED_WITH_ERROR\";\n\nexport const POLL_EVENTS = \"POLL_EVENTS\";\nexport const POLL_EVENTS_COMPLETED = \"POLL_EVENTS_COMPLETED\";\nexport const POLL_EVENTS_COMPLETED_WITH_ERROR =\n  \"POLL_EVENTS_COMPLETED_WITH_ERROR\";\n\nexport const FETCH_EVENT_USERS = \"FETCH_EVENT_USERS\";\nexport const FETCH_EVENT_USERS_COMPLETED = \"FETCH_EVENT_USERS_COMPLETED\";\nexport const FETCH_EVENT_USERS_COMPLETED_WITH_ERROR =\n  \"FETCH_EVENT_USERS_COMPLETED_WITH_ERROR\";\n\nconst ADD_VIDEO_ROOM_PARTICIPANTS = \"ADD_VIDEO_ROOM_PARTICIPANTS\";\nconst ADD_VIDEO_ROOM_PARTICIPANTS_COMPLETED =\n  \"ADD_VIDEO_ROOM_PARTICIPANTS_COMPLETED\";\nconst ADD_VIDEO_ROOM_PARTICIPANTS_COMPLETED_WITH_ERROR =\n  \"ADD_VIDEO_ROOM_PARTICIPANTS_COMPLETED_WITH_ERROR\";\n\nconst setEvents = (state, data) => {\n  const {\n    events: upcomingEvents = {},\n    appointments: upcomingAppointments = {},\n    scheduleEventListByDate: upcomingScheduleEventListByDate = {}\n  } = data;\n  const { events = {}, appointments = {} } = state;\n  const newEvents = { ...events, ...upcomingEvents };\n  const newAppointments = Object.assign({}, appointments, upcomingAppointments);\n  const newScheduleEventListByDate = Object.assign(\n    {},\n    upcomingScheduleEventListByDate\n  );\n\n  return {\n    ...state,\n    events: newEvents,\n    appointments: newAppointments,\n    scheduleEventListByDate: newScheduleEventListByDate\n  };\n};\n\nconst updateEvent = (state, data) => {\n  const { events: newEvents = {} } = data;\n  const { events = {} } = state;\n  return {\n    ...state,\n    events: { ...events, ...newEvents }\n  };\n};\n\nconst setAppointmentsHistory = (state, data) => {\n  const {\n    events: upcomingEvents = {},\n    appointmentHistory: upcomingApptHistory = {},\n    historyIds: upcomingHistoryId = {}\n  } = data;\n\n  const { events = {}, historyIds = [], appointmentHistory = {} } = state;\n  const newEvents = { ...events, ...upcomingEvents };\n  const newAppointmentHistory = Object.assign(\n    {},\n    appointmentHistory,\n    upcomingApptHistory\n  );\n  const newHistoryIds = new Set([...historyIds, ...upcomingHistoryId]);\n\n  return {\n    ...state,\n    events: newEvents,\n    appointmentHistory: newAppointmentHistory,\n    historyIds: [...newHistoryIds]\n  };\n};\n\n// const onRescheduleComplete = (state, data) => {\n//   const { events = {}, scheduleEventListByDate = {} } = state;\n//   const { id, fields } = data;\n//   const { startDate } = fields;\n//   const currentEvent = events[id] || {};\n//   const oldDate = moment(currentEvent.startTime).format(\"YYYY-MM-DD\");\n//   const newDate = moment(startDate).format(\"YYYY-MM-DD\");\n//   const oldEventList = scheduleEventListByDate[oldDate] || [];\n//   let newEventsList = scheduleEventListByDate[newDate] || [];\n//   newEventsList.push(id);\n//   const newScheduleEventListByDate = {\n//     ...scheduleEventListByDate,\n//     [oldDate]: oldEventList.filter(value => {\n//       return id !== value;\n//     }),\n//     [newDate]: newEventsList\n//   };\n//   const updatedEvent = { ...currentEvent, ...fields };\n//   return {\n//     ...state,\n//     events: { ...events, [id]: updatedEvent },\n//     scheduleEventListByDate: newScheduleEventListByDate\n//   };\n// };\n\nconst onEditNotesComplete = (state, data) => {\n  const { events = {} } = state;\n  const { id, notes } = data;\n  const currentEvent = events[id] || {};\n  const oldData = currentEvent.data || {};\n  const newData = { ...oldData, notes: notes };\n  const updatedEvent = { ...currentEvent, data: newData };\n  return { ...state, events: { ...events, [id]: updatedEvent } };\n};\n\nexport const fetchEventsData = (userId, startDate, endDate) => {\n  return async dispatch => {\n    try {\n      dispatch({ type: FETCHING_EVENTS_DATA });\n      let response = await doRequest({\n        method: REQUEST_TYPE.GET,\n        url: Event.getAppointments(userId, startDate, endDate)\n      });\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: FETCHING_EVENTS_DATA_COMPLETED,\n          payload: payload.data\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: FETCHING_EVENTS_DATA_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {}\n  };\n};\n\nexport const fetchEventUsers = eventId => {\n  return async dispatch => {\n    try {\n      dispatch({ type: FETCH_EVENT_USERS });\n      const response = await doRequest({\n        method: REQUEST_TYPE.GET,\n        url: Event.getEventUsers(eventId)\n      });\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: FETCH_EVENT_USERS_COMPLETED,\n          payload: { users: payload.data }\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: FETCH_EVENT_USERS_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {}\n  };\n};\n\nconst setAdverseEventData = (state, data, userId) => {\n  const { events = {}, adverseEvent } = data;\n  const { events: oldEvents = {} } = state;\n  const { adverseEvent: oldAdverseEvent = {} } = state;\n  const newadverseEvent = { ...oldAdverseEvent, ...adverseEvent };\n\n  return {\n    ...state,\n    events: { ...oldEvents, ...events },\n    adverseEvent: newadverseEvent\n  };\n};\n\nconst setLastUpdatedAt = (state, data) => {\n  const lastUpdatedAt = data.updatedAt;\n  return {\n    ...state,\n    lastUpdatedAt: lastUpdatedAt\n  };\n};\n\nexport const fetchAdverseEvent = userId => {\n  return async dispatch => {\n    try {\n      const response = await doRequest({\n        method: REQUEST_TYPE.GET,\n        url: Event.getFetchAdverseEvent(userId)\n      });\n\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: FETCH_ADVERSE_EVENT_COMPLETED,\n          payload: payload.data,\n          userId: userId\n        });\n      } else if (response.status === false) {\n      }\n    } catch (error) {}\n  };\n};\n\nexport const fetchAppointmentsHistory = (userId, startDate) => {\n  return async dispatch => {\n    try {\n      dispatch({ type: FETCH_APPOINTMENTS_HISTORY });\n      let response = await doRequest({\n        params: { query: startDate },\n        method: REQUEST_TYPE.GET,\n        url: Event.getAppointmentsHistory(userId)\n      });\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: FETCH_APPOINTMENTS_HISTORY_COMPLETED,\n          payload: payload.data\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: FETCH_APPOINTMENTS_HISTORY_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n      return response;\n    } catch (error) {}\n  };\n};\n\nexport const cancelAppointment = (eventId, all, reason) => {\n  return async dispatch => {\n    try {\n      dispatch({ type: CANCEL_APPOINTMENT });\n      let response = await doRequest({\n        data: reason,\n        method: REQUEST_TYPE.POST,\n        url: Event.getCancelAppointment(eventId, all)\n      });\n\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: CANCEL_APPOINTMENT_COMPLETED,\n          payload: { ...payload.data, message: payload.message },\n          id: eventId,\n          all: all\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: CANCEL_APPOINTMENT_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {}\n  };\n};\n\nexport const cancelReminder = (eventId, all) => {\n  return async dispatch => {\n    try {\n      dispatch({ type: CANCEL_REMINDER });\n      let response = await doRequest({\n        method: REQUEST_TYPE.POST,\n        url: Event.getCancelReminderURL(eventId, all)\n      });\n\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: CANCEL_REMINDER_COMPLETED,\n          payload: { ...payload.data, message: payload.message },\n          id: eventId,\n          all: all\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: CANCEL_REMINDER_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {}\n  };\n};\n\nexport const setAppointmentStatus = details => {\n  return async dispatch => {\n    try {\n      const { eventId, status: eventStatus } = details;\n      dispatch({ type: SET_APPOINTMENT_STATUS });\n      let response = await doRequest({\n        method: REQUEST_TYPE.POST,\n        url: Event.setAppointmentStatusURL(eventId),\n        data: { status: eventStatus }\n      });\n\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: SET_APPOINTMENT_STATUS_COMPLETED,\n          payload: {\n            data: payload.data,\n            message: payload.message\n          }\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: SET_APPOINTMENT_STATUS_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {}\n  };\n};\n\nexport const editReminder = data => {\n  return async dispatch => {\n    try {\n      const { id, ...fields } = data;\n\n      dispatch({ type: RESCHEDULE });\n      let response = await doRequest({\n        method: REQUEST_TYPE.POST,\n        url: Event.getEditReminderURL(id),\n        data: fields\n      });\n\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: RESCHEDULE_COMPLETED,\n          payload: { id: id, fields, message: payload.message }\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: RESCHEDULE_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {}\n  };\n};\n\nexport const editNotesReminder = data => {\n  return async dispatch => {\n    try {\n      const { id, notes } = data;\n      dispatch({ type: EDIT_NOTES });\n      let response = await doRequest({\n        method: REQUEST_TYPE.POST,\n        url: Event.getEditNotesReminderURL(id),\n        data: { notes: notes }\n      });\n\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: EDIT_NOTES_COMPLETED,\n          payload: { id: id, notes, message: payload.message }\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: EDIT_NOTES_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {}\n  };\n};\n\nexport const reschedule = data => {\n  return async dispatch => {\n    try {\n      const { id, ...fields } = data;\n      dispatch({ type: RESCHEDULE });\n      let response = await doRequest({\n        method: REQUEST_TYPE.POST,\n        url: Event.getRescheduleAppointmentURL(id),\n        data: fields\n      });\n\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: RESCHEDULE_COMPLETED,\n          payload: { id: id, fields, message: payload.message }\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: RESCHEDULE_COMPLETED_WITH_ERROR,\n          payload: { error: response.payload.error }\n        });\n      }\n    } catch (error) {}\n  };\n};\n\nexport const editNotes = data => {\n  return async dispatch => {\n    try {\n      const { id, notes } = data;\n      dispatch({ type: EDIT_NOTES });\n      let response = await doRequest({\n        method: REQUEST_TYPE.POST,\n        url: Event.getEditNotesURL(id),\n        data: { notes: notes }\n      });\n\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: EDIT_NOTES_COMPLETED,\n          payload: { id: id, notes, message: payload.message }\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: EDIT_NOTES_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {}\n  };\n};\n\nexport const pollEventsData = () => {\n  return async dispatch => {\n    try {\n      dispatch({ type: POLL_EVENTS });\n      let response = await doRequest({\n        method: REQUEST_TYPE.GET,\n        url: Event.getLastEditedEvent()\n      });\n      const { status, payload } = response;\n\n      if (status === true) {\n        dispatch({\n          type: POLL_EVENTS_COMPLETED,\n          payload: payload.data\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: POLL_EVENTS_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {}\n  };\n};\n\nexport const addVideoRoomParticipantsInEvent = (eventId, userOne, userTwo) => {\n  return async dispatch => {\n    try {\n      dispatch({ type: ADD_VIDEO_ROOM_PARTICIPANTS });\n      let response = await doRequest({\n        method: REQUEST_TYPE.POST,\n        url: Event.addVideoRoomParticipantsURL(eventId),\n        data: { userOne: userOne, userTwo: userTwo }\n      });\n      const { status, payload } = response;\n\n      if (status === true) {\n        dispatch({\n          type: ADD_VIDEO_ROOM_PARTICIPANTS_COMPLETED\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: ADD_VIDEO_ROOM_PARTICIPANTS_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {}\n  };\n};\n\nexport default (state = intialState, action) => {\n  const { type, payload = {}, userId } = action;\n\n  switch (type) {\n    // case RESCHEDULE_COMPLETED:\n    //   return onRescheduleComplete(state, payload);\n    case EDIT_NOTES_COMPLETED:\n      return onEditNotesComplete(state, payload);\n    case FETCHING_EVENTS_DATA_COMPLETED:\n      return setEvents(state, payload);\n    case FETCH_APPOINTMENTS_HISTORY_COMPLETED:\n      return setAppointmentsHistory(state, payload);\n    case FETCH_ADVERSE_EVENT_COMPLETED:\n      return setAdverseEventData(state, payload, userId);\n    case POLL_EVENTS_COMPLETED:\n      return setLastUpdatedAt(state, payload);\n    case SET_APPOINTMENT_STATUS_COMPLETED:\n      return updateEvent(state, payload);\n    default:\n      return state;\n  }\n};\n","import { doRequest } from \"../../Helper/network\";\nimport { User } from \"../../Helper/urls\";\nimport { REQUEST_TYPE } from \"../../constant\";\nimport { CHANGING_PROFILE_PIC_COMPLETED } from \"../page/changeProfilePic\";\nimport { SENDING_OTP_COMPLETED, VERIFYING_OTP_COMPLETED } from \"../phone\";\nimport { SAVING_USER_COMPLETED } from \"../page/EditProfile\";\nimport config from \"../../config\";\n\nexport const DISCHARGE_PATIENT_REQUEST = \"DISCHARGE_PATIENT_REQUEST\";\nexport const DISCHARGE_PATIENT_REQUEST_COMPLETED =\n  \"DISCHARGE_PATIENT_REQUEST_COMPLETED\";\nexport const DISCHARGE_PATIENT_REQUEST_COMPLETED_WITH_ERROR =\n  \"DISCHARGE_PATIENT_REQUEST_COMPLETED_WITH_ERROR\";\n\nexport const VERIFY_DOCUMENT_REQUEST = \"VERIFY_DOCUMENT_REQUEST\";\nexport const VERIFY_DOCUMENT_REQUEST_COMPLETED =\n  \"VERIFY_DOCUMENT_REQUEST_COMPLETED\";\nexport const VERIFY_DOCUMENT_REQUEST_COMPLETED_WITH_ERROR =\n  \"VERIFY_DOCUMENT_REQUEST_COMPLETED_WITH_ERROR\";\n\nexport const REUPLOAD_IDPROOF_REQUEST = \"REUPLOAD_IDPROOF_REQUEST\";\nexport const REUPLOAD_IDPROOF_REQUEST_COMPLETED =\n  \"REUPLOAD_IDPROOF_REQUEST_COMPLETED\";\nexport const REUPLOAD_IDPROOF_REQUEST_COMPLETED_WITH_ERROR =\n  \"REUPLOAD_IDPROOF_REQUEST_COMPLETED_WITH_ERROR\";\n\nexport const REUPLOAD_CONSENTFORM_REQUEST = \"REUPLOAD_CONSENTFORM_REQUEST\";\nexport const REUPLOAD_CONSENTFORM_REQUEST_COMPLETED =\n  \"REUPLOAD_CONSENTFORM_REQUEST_COMPLETED\";\nexport const REUPLOAD_CONSENTFORM_REQUEST_COMPLETED_WITH_ERROR =\n  \"REUPLOAD_CONSENTFORM_REQUEST_COMPLETED_WITH_ERROR\";\n\nconst initialState = {};\n\nfunction setUsersData(state, data = {}) {\n  const { users } = data;\n\n  if (users) {\n    // (\"=+++++++++++++++++++user data------------\", Object.keys(users))\n    const userIds = Object.keys(users);\n    const prevUsers = { ...state };\n    let newState = Object.assign({}, prevUsers);\n\n    userIds.forEach(id => {\n      newState = Object.assign(\n        newState,\n        setIndividualUser(prevUsers, users, id)\n      );\n    });\n    //\n    return newState;\n  } else return state;\n}\n\nfunction setIndividualUser(state, users, id) {\n  const user = Object.assign({}, state[id], users[id]);\n  return { [id]: { ...user, baseDocUrl: config.BASE_DOC_URL } }; //addded quick fix need to remove\n}\n\n// function updateDataReducer(state, data) {\n//   return Object.assign({}, state, data);\n// }\n\n// function updateUserDataReducer(state, data) {\n//   return Object.assign({}, state, {\n//     userData: updateDataReducer(state.userData, data)\n//   });\n// }\n\nfunction changeCurrentUserProfilePic(state, data) {\n  try {\n    const { id, profilePicUrl } = data;\n    const allUsers = state;\n    const currentUsers = Object.assign({}, allUsers[id]);\n    const { basicInfo } = currentUsers;\n    const newBasicInfo = { ...basicInfo, profilePicLink: profilePicUrl };\n    const updatedData = { ...currentUsers, basicInfo: newBasicInfo };\n    const updatedUsers = { ...allUsers, [id]: updatedData };\n    return updatedUsers;\n  } catch (err) {\n    throw err;\n  }\n}\n\nfunction changeContactNo(state, data) {\n  const { id, contactNo = {} } = data;\n  const allUsers = state;\n  const currentUsers = Object.assign({}, allUsers[id]);\n  const { personalInfo } = currentUsers;\n  const newContact = Object.assign(personalInfo.contactNo, contactNo);\n  const newPerSonalInfo = { ...personalInfo, contactNo: newContact };\n  return {\n    ...allUsers,\n    [id]: { ...currentUsers, personalInfo: newPerSonalInfo }\n  };\n}\n\nfunction setUserProfileComPleted(user) {\n  return { ...user, isProfileCompleted: true };\n}\n\nfunction changeDocumentVerificationStatus(state, payload, userId) {\n  const allUsers = state;\n  const currentUser = Object.assign({}, allUsers[userId]);\n  const { documents } = currentUser;\n  const newDocuments = {\n    ...documents,\n    consentFormVerified: payload.consentFormVerified,\n    idProofVerified: payload.idProofVerified\n  };\n  const status =\n    payload.consentFormVerified && payload.idProofVerified\n      ? \"ENROLLED\"\n      : \"INACTIVE\";\n  return {\n    ...allUsers,\n    [userId]: { ...currentUser, documents: newDocuments, status: status }\n  };\n}\n\nfunction updateUserDocuments(state, payload) {\n  const { data, userId } = payload;\n  const allUsers = state;\n  const currentUser = Object.assign({}, allUsers[userId]);\n  return {\n    ...allUsers,\n    [userId]: { ...currentUser, status: \"INACTIVE\", ...data }\n  };\n}\n\nfunction updateUserStatusToDischarged(state, payload) {\n  const { ids: userIds } = payload;\n  const allUsers = state;\n  let updatedUsers = { ...allUsers };\n  userIds.forEach(id => {\n    const currentUser = Object.assign({}, allUsers[id]);\n    updatedUsers = {\n      ...updatedUsers,\n      [id]: { ...currentUser, status: \"DISCHARGED\" }\n    };\n  });\n  return updatedUsers;\n}\n\nexport const discharge = ids => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({ type: DISCHARGE_PATIENT_REQUEST });\n      const url = User.getDischargePatientURL();\n      const response = await doRequest({\n        method: REQUEST_TYPE.POST,\n        data: { ids: ids },\n        url: url\n      });\n      const { status, payload } = response;\n\n      if (status === true) {\n        dispatch({\n          type: DISCHARGE_PATIENT_REQUEST_COMPLETED,\n          payload: {\n            ids: ids,\n            message: payload.message\n          }\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: DISCHARGE_PATIENT_REQUEST_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n      return status;\n    } catch (error) {}\n  };\n};\n\nexport const verify = (id, proofs) => {\n  return async dispatch => {\n    try {\n      dispatch({ type: VERIFY_DOCUMENT_REQUEST });\n      const url = User.verifyDocumentURL(id);\n      const response = await doRequest({\n        method: REQUEST_TYPE.POST,\n        data: proofs,\n        url: url\n      });\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: VERIFY_DOCUMENT_REQUEST_COMPLETED,\n          payload: payload.data,\n          userId: id\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: VERIFY_DOCUMENT_REQUEST_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {}\n  };\n};\n\nexport const reUploadIdProofs = (id, idProofs) => {\n  return async dispatch => {\n    try {\n      const docs = { docs: idProofs };\n      dispatch({ type: REUPLOAD_IDPROOF_REQUEST });\n      const url = User.reUploadIdProofsURL(id);\n      const response = await doRequest({\n        method: REQUEST_TYPE.POST,\n        data: docs,\n        url: url\n      });\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: REUPLOAD_IDPROOF_REQUEST_COMPLETED,\n          payload: { data: payload.data, userId: id }\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: REUPLOAD_IDPROOF_REQUEST_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {}\n  };\n};\n\nexport const reUploadConsentDocs = (id, consentDocs) => {\n  return async dispatch => {\n    try {\n      const docs = { docs: consentDocs };\n      dispatch({ type: REUPLOAD_CONSENTFORM_REQUEST });\n      const url = User.reUploadConsentDocsURL(id);\n      const response = await doRequest({\n        method: REQUEST_TYPE.POST,\n        data: docs,\n        url: url\n      });\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: REUPLOAD_CONSENTFORM_REQUEST_COMPLETED,\n          payload: { data: payload.data, userId: id }\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: REUPLOAD_CONSENTFORM_REQUEST_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {}\n  };\n};\n\nexport default (state = initialState, action) => {\n  const { type, payload, userId = {} } = action;\n  switch (type) {\n    case CHANGING_PROFILE_PIC_COMPLETED:\n      return changeCurrentUserProfilePic(state, payload);\n    case SAVING_USER_COMPLETED:\n      return {\n        ...state,\n        [payload.userId]: setUserProfileComPleted(state[payload.userId])\n      };\n    case SENDING_OTP_COMPLETED:\n    case VERIFYING_OTP_COMPLETED:\n      return changeContactNo(state, payload);\n    case VERIFY_DOCUMENT_REQUEST_COMPLETED:\n      return changeDocumentVerificationStatus(state, payload, userId);\n    case REUPLOAD_IDPROOF_REQUEST_COMPLETED:\n    case REUPLOAD_CONSENTFORM_REQUEST_COMPLETED:\n      return updateUserDocuments(state, payload);\n\n    case DISCHARGE_PATIENT_REQUEST_COMPLETED:\n      return updateUserStatusToDischarged(state, payload);\n\n    default:\n      //\n      return setUsersData(state, payload);\n  }\n};\n","import { doRequest } from \"../../Helper/network\";\nimport { Article } from \"../../Helper/urls\";\nimport { REQUEST_TYPE } from \"../../constant\";\n\nconst FETCHING_ARTICLES = \"FETCHING_ARTICLES\";\nconst FETCHING_ARTICLES_COMPLETED = \"FETCHING_ARTICLES_COMPLETED\";\nconst FETCHING_ARTICLES_COMPLETED_WITH_ERROR =\n  \"FETCHING_ARTICLES_COMPLETED_WITH_ERROR\";\nexport const MAKE_FAVOURITE_UNFAVOURITE = \"MAKE_FAVOURITE_UNFAVOURITE\";\nexport const MAKE_FAVOURITE_UNFAVOURITE_COMPLETE =\n  \"MAKE_FAVOURITE_UNFAVOURITE_COMPLETE\";\nexport const MAKE_FAVOURITE_UNFAVOURITE_COMPLETE_WITH_ERROR =\n  \"MAKE_FAVOURITE_UNFAVOURITE_COMPLETED_WITH_ERROR\";\n\nexport const FETCHING_ARTICLE_BY_ID = \"FETCHING_ARTICLE_BY_ID\";\nexport const FETCHING_ARTICLE_BY_ID_COMPLETED =\n  \"FETCHING_ARTICLE_BY_ID_COMPLETED\";\nexport const FETCHING_ARTICLE_BY_ID_COMPLETED_WITH_ERROR =\n  \"FETCHING_ARTICLE_BY_ID_COMPLETED_WITH_ERROR\";\n\nexport const SHARING_ARTICLE = \"SHARING_ARTICLE\";\nexport const SHARING_ARTICLE_COMPLETED = \"SHARING_ARTICLE_COMPLETED\";\nexport const SHARING_ARTICLE_COMPLETED_WITH_ERROR =\n  \"SHARING_ARTICLE_COMPLETED_WITH_ERROR\";\n\nexport const ARTICLE_PARTICIPANTS = \"ARTICLE_PARTICIPANTS\";\nexport const ARTICLE_PARTICIPANTS_COMPLETED = \"ARTICLE_PARTICIPANTS_COMPLETED\";\nexport const ARTICLE_PARTICIPANTS_COMPLETED_WITH_ERROR =\n  \"ARTICLE_PARTICIPANTS_COMPLETED_WITH_ERROR\";\n\nexport const fetchArticleParticipants = articleId => {\n  return async dispatch => {\n    let response = {};\n    try {\n      dispatch({ type: ARTICLE_PARTICIPANTS });\n      response = await doRequest({\n        method: REQUEST_TYPE.GET,\n        url: Article.getArticleParticipantsURL(articleId)\n      });\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: ARTICLE_PARTICIPANTS_COMPLETED,\n          payload: payload.data\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: ARTICLE_PARTICIPANTS_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {}\n    return response;\n  };\n};\n\nexport const fetchArticlesById = articleId => {\n  return async dispatch => {\n    let response = {};\n    try {\n      dispatch({ type: FETCHING_ARTICLE_BY_ID });\n      response = await doRequest({\n        method: REQUEST_TYPE.GET,\n        url: Article.getArticleByIdURL(articleId)\n      });\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: FETCHING_ARTICLE_BY_ID_COMPLETED,\n          payload: payload.data\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: FETCHING_ARTICLE_BY_ID_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {}\n    return response;\n  };\n};\n\nexport const shareArticle = data => {\n  return async dispatch => {\n    let response = {};\n    try {\n      const { participants, articleId } = data;\n      dispatch({ type: SHARING_ARTICLE });\n      response = await doRequest({\n        method: REQUEST_TYPE.POST,\n        url: Article.getShareArticleURL(articleId),\n        data: { participants }\n      });\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: SHARING_ARTICLE_COMPLETED,\n          payload: { ...payload.data, message: payload.message }\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: SHARING_ARTICLE_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {}\n    return response;\n  };\n};\n\nexport const makeFavouriteUnfavourite = data => {\n  return async (dispatch, getState) => {\n    try {\n      const { articleId, isFavourite } = data;\n\n      dispatch({ type: MAKE_FAVOURITE_UNFAVOURITE });\n      const response = await doRequest({\n        method: REQUEST_TYPE.POST,\n        data: { isFavourite },\n        url: Article.makeFavouriteUnfavouriteURL(articleId)\n      });\n      const { status, payload } = response;\n      if (status === true) {\n        let { articles } = getState();\n        dispatch({\n          type: MAKE_FAVOURITE_UNFAVOURITE_COMPLETE,\n          payload: {\n            articleId,\n            isFavourite,\n            articles,\n            message: payload.message\n          }\n        });\n      } else if (status === false) {\n        dispatch({\n          type: MAKE_FAVOURITE_UNFAVOURITE_COMPLETE_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {\n      console.log(\"ERROR\", error);\n      throw error;\n    }\n  };\n};\n\nexport const fetchArticles = () => {\n  return async dispatch => {\n    try {\n      dispatch({ type: FETCHING_ARTICLES });\n      const response = await doRequest({\n        method: REQUEST_TYPE.GET,\n        url: Article.getArticlesURL()\n      });\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: FETCHING_ARTICLES_COMPLETED,\n          payload: payload.data\n        });\n      } else if (status === false) {\n        dispatch({\n          type: FETCHING_ARTICLES_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {\n      console.log(\"ERROR\", error);\n      throw error;\n    }\n  };\n};\n\nfunction setArticles(state = {}, data = {}) {\n  const { articles } = data;\n  if (articles) {\n    return { ...state, ...articles };\n  }\n  return state;\n}\n\nfunction setArticleStateOnfavouriteUnfavourite(state, data) {\n  let { articleId, isFavourite, articles } = data;\n  let newArticles = { ...articles };\n  newArticles[articleId].isFavourite = isFavourite;\n  return { ...state, ...newArticles };\n}\n\nexport default (state = {}, action) => {\n  const { type, payload = {} } = action;\n  switch (type) {\n    case MAKE_FAVOURITE_UNFAVOURITE_COMPLETE:\n      return setArticleStateOnfavouriteUnfavourite(state, payload);\n    default:\n      return setArticles(state, payload);\n  }\n};\n","import { doRequest } from \"../../Helper/network\";\nimport { User } from \"../../Helper/urls\";\nimport { REQUEST_TYPE } from \"../../constant\";\nconst intialState = {};\n\nexport const FETCHING_PROGRAMS_DATA = \"FETCHING_PROGRAMS_DATA\";\nexport const FETCHING_PROGRAMS_DATA_COMPLETED =\n  \"FETCHING_PROGRAMS_DATA_COMPLETED\";\nexport const FETCHING_PROGRAMS_DATA_COMPLETED_WITH_ERROR =\n  \"FETCHING_PROGRAMS_DATA_COMPLETED_WITH_ERROR\";\n\nexport const FETCHING_PROGRAM_DOCTORS_DATA = \"FETCHING_PROGRAM_DOCTORS_DATA\";\nexport const FETCHING_PROGRAM_DOCTORS_DATA_COMPLETED =\n  \"FETCHING_PROGRAM_DOCTORS_DATA_COMPLETED\";\nexport const FETCHING_PROGRAM_DOCTORS_DATA_COMPLETED_WITH_ERROR =\n  \"FETCHING_PROGRAM_DOCTORS_DATA_COMPLETED_WITH_ERROR\";\n\nexport const FETCHING_PROGRAM_PATIENTS_DATA = \"FETCHING_PROGRAM_PATIENTS_DATA\";\nexport const FETCHING_PROGRAM_PATIENTS_DATA_COMPLETED =\n  \"FETCHING_PROGRAM_PATIENTS_DATA_COMPLETED\";\nexport const FETCHING_PROGRAM_PATIENTS_DATA_COMPLETED_WITH_ERROR =\n  \"FETCHING_PROGRAM_PATIENTS_DATA_COMPLETED_WITH_ERROR\";\n\nexport const FETCHING_CURRENT_PROGRAM_DETAILS =\n  \"ETCHING_CURRENT_PROGRAM_DETAILS\";\nexport const FETCHING_CURRENT_PROGRAM_DETAILS_COMPLETED =\n  \"FECTCHING_CURRENT_PROGRAM_DETAILS_COMPLETED\";\nexport const FETCHING_CURRENT_PROGRAM_DETAILS_COMPLETED_WITH_ERROR =\n  \"FETCHING_CURRENT_PROGRAM_DETAILS_COMPLETED_WITH_ERROR\";\n\nexport const CLEAR_CURRENT_PROGRAM_DETAILS = \"CLEAR_CURRENT_PROGRAM_DETAILS\";\n\nfunction setPrograms(state, data) {\n  const { programs } = data;\n  if (programs) {\n    const programIds = Object.keys(programs);\n    const prevPrograms = { ...state };\n    let newState = Object.assign({}, prevPrograms);\n    programIds.forEach(id => {\n      newState = Object.assign(\n        newState,\n        setindividualProgram(prevPrograms, programs, id)\n      );\n    });\n    return newState;\n  } else {\n    return state;\n  }\n}\n\nfunction setindividualProgram(state, programs, id) {\n  const program = Object.assign({}, state[id], programs[id]);\n  return { [id]: program };\n}\n\n// const setProgramDoctors = (state, data) => {\n//   const currentState = Object.assign({}, state);\n//   const programDoctorsData = Object.assign({}, currentState.programDoctors);\n//   const newProgramDoctorsData = Object.assign(programDoctorsData, data);\n//   return Object.assign(currentState, {\n//     programDoctors: { ...newProgramDoctorsData }\n//   });\n// };\n\n// const setProgramDoctors = (state, data) => {\n//\n//\n//   const currentState = Object.assign({}, state);\n//\n//   const usersData = Object.assign({}, currentState.users);\n//\n//   const newUsersData = Object.assign({}, usersData, data);\n//\n//   return Object.assign( state, ...newUsersData);\n// };\n\n// const setProgramPatients = (state, data) => {\n//   const currentState = Object.assign({}, state);\n//   const programPatientsData = Object.assign({}, currentState.programPatients);\n//   const newProgramPatientsData = Object.assign(programPatientsData, data);\n//   return Object.assign(currentState, {\n//     programPatients: { ...newProgramPatientsData }\n//   });\n// };\n\n// const setCurrentProgramData = (state, data) => {\n//   const currentState = Object.assign({}, state);\n//   const programData = Object.assign({}, currentState.data);\n//   const newProgramData = Object.assign(programData, data);\n//   return Object.assign(currentState, {\n//     basicInfo: { ...newProgramData[\"info\"] },\n//     products: { ...newProgramData[\"products\"] }\n//   });\n// };\n\n// const clearCurrentProgramsData = state => {\n//   let newState = Object.assign({}, state);\n//   delete newState.basicInfo;\n//   delete newState.products;\n//   delete newState.programDoctors;\n//   delete newState.programPatients;\n//   return newState;\n// };\n\nexport const fetchProgramsData = () => {\n  return async dispatch => {\n    try {\n      dispatch({ type: FETCHING_PROGRAMS_DATA });\n      let response = await doRequest({\n        method: REQUEST_TYPE.GET,\n        url: User.getProgramsURL()\n      });\n      // (\"============================inside the program controleer ==========================\", response)\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: FETCHING_PROGRAMS_DATA_COMPLETED,\n          payload: payload.data\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: FETCHING_PROGRAMS_DATA_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n      return status;\n    } catch (error) {\n      throw error;\n      //\n    }\n  };\n};\n\nexport const fetchProgramDoctorsForModal = programId => {\n  return async dispatch => {\n    try {\n      let response = await doRequest({\n        method: REQUEST_TYPE.GET,\n        url: `/program/${programId}/doctor`\n      });\n\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: \"itSTEMPORARY\",\n          payload: { ...payload.data }\n        });\n      } else if (response.status === false) {\n        // dispatch({\n        //   type: FETCHING_PROGRAM_DOCTORS_DATA_COMPLETED_WITH_ERROR,\n        //   payload: payload.error\n        // });\n      }\n    } catch (error) {\n      throw error;\n      //\n    }\n  };\n};\n\n//check for payload.data.programDoctorsData\nexport const fetchProgramDoctors = programId => {\n  return async dispatch => {\n    try {\n      dispatch({ type: FETCHING_PROGRAM_DOCTORS_DATA });\n      let response = await doRequest({\n        method: REQUEST_TYPE.GET,\n        url: User.getProgramDoctorsURL(programId)\n      });\n\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: FETCHING_PROGRAM_DOCTORS_DATA_COMPLETED,\n          payload: payload.data\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: FETCHING_PROGRAM_DOCTORS_DATA_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {\n      throw error;\n      //\n    }\n  };\n};\n\nexport const fetchProgramPatient = (programId, filterBy, sortBy, query) => {\n  return async dispatch => {\n    try {\n      let data = {};\n      if (filterBy) {\n        data = { ...data, filterBy };\n      }\n      if (sortBy) {\n        data = { ...data, sortBy };\n      }\n      if (query) {\n        data = { ...data, ...query };\n      }\n      dispatch({\n        type: FETCHING_PROGRAM_PATIENTS_DATA\n      });\n      let response = await doRequest({\n        method: REQUEST_TYPE.GET,\n        url: User.getProgramPatientsURL(programId),\n        params: data\n      });\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: FETCHING_PROGRAM_PATIENTS_DATA_COMPLETED,\n          payload: payload.data,\n          programId\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: FETCHING_PROGRAM_PATIENTS_DATA_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (err) {\n      throw err;\n    }\n  };\n};\nexport const fetchProgramPatients = programId => {\n  return async dispatch => {\n    try {\n      dispatch({ type: FETCHING_PROGRAM_PATIENTS_DATA });\n      let response = await doRequest({\n        method: REQUEST_TYPE.GET,\n        url: User.getProgramPatientsUrl(programId)\n      });\n      let { error, payload } = response;\n      if (!error) {\n        dispatch({\n          type: FETCHING_PROGRAM_PATIENTS_DATA_COMPLETED,\n          payload: payload.data\n        });\n      } else {\n        dispatch({\n          type: FETCHING_PROGRAM_PATIENTS_DATA_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {}\n  };\n};\n\nexport const fetchCurrentProgram = programId => {\n  return async dispatch => {\n    try {\n      dispatch({ type: FETCHING_CURRENT_PROGRAM_DETAILS });\n      let response = await doRequest({\n        url: User.getCurrentProgramUrl(programId),\n        method: REQUEST_TYPE.GET\n      });\n      let { status, payload } = response;\n      if (status) {\n        dispatch({\n          type: FETCHING_CURRENT_PROGRAM_DETAILS_COMPLETED,\n          payload: { ...payload.data, programId }\n        });\n      } else {\n        dispatch({\n          type: FETCHING_CURRENT_PROGRAM_DETAILS_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n      return status;\n    } catch (error) {}\n  };\n};\n\nexport const clearCurrentPrograms = () => {\n  return dispatch => {\n    dispatch({ type: CLEAR_CURRENT_PROGRAM_DETAILS });\n  };\n};\n\nexport default (state = intialState, action) => {\n  const { type, payload = {} } = action;\n  switch (type) {\n    case FETCHING_PROGRAMS_DATA_COMPLETED:\n      return setPrograms(state, payload);\n    case FETCHING_PROGRAM_DOCTORS_DATA_COMPLETED:\n      return setPrograms(state, payload);\n    case FETCHING_PROGRAM_PATIENTS_DATA_COMPLETED:\n      return setPrograms(state, payload);\n    case FETCHING_CURRENT_PROGRAM_DETAILS_COMPLETED:\n      return setPrograms(state, payload);\n    case CLEAR_CURRENT_PROGRAM_DETAILS:\n      return state;\n    default:\n      return setPrograms(state, payload);\n  }\n};\n\n// export function current_program_data(state = {}, action) {\n//   const { type, payload = {} } = action;\n//   switch (type) {\n//     case FETCHING_CURRENT_PROGRAM_DETAILS:\n//       return setPrograms(state, { isloading: true });\n//     case FETCHING_PROGRAM_DOCTORS_DATA_COMPLETED:\n//       return setPrograms(state, { isloading: false, payload: payload.program });\n//     case FETCHING_PROGRAM_DOCTORS_DATA_COMPLETED_WITH_ERROR:\n//       return setPrograms(state, { isloading: false, payload: payload });\n//   }\n// }\n","import { doRequest } from \"../../Helper/network\";\nimport { Phone } from \"../../Helper/urls\";\nimport { REQUEST_TYPE } from \"../../constant\";\nconst RESET = \"reset\";\nconst SENDING_OTP = \"SENDING_OTP\";\nexport const SENDING_OTP_COMPLETED = \"SENDING_OTP_COMPLETED\";\nconst SENDING_OTP_COMPLETED_WITH_ERROR = \"SENDING_OTP_COMPLETED_WITH_ERROR\";\n\nconst VERIFYING_OTP = \"VERIFYING_OTP\";\nexport const VERIFYING_OTP_COMPLETED = \"VERIFYING_OTP_COMPLETED\";\nconst VERIFYING_OTP_COMPLETED_WITH_ERROR = \"VERIFYING_OTP_COMPLETED_WITH_ERROR\";\n\nconst initialState = {\n  isError: false,\n  error: {}\n};\n\nexport const reset = () => {\n  return dispatch => {\n    dispatch({ type: RESET });\n  };\n};\n\nexport const sendOtp = (data = {}, id) => {\n  return async dispatch => {\n    try {\n      dispatch({ type: SENDING_OTP });\n      const response = await doRequest({\n        method: REQUEST_TYPE.POST,\n        data: { contactNo: data, id },\n        url: Phone.getSendOtpURL()\n      });\n      const { status, payload } = response;\n\n      if (status) {\n        dispatch({\n          type: SENDING_OTP_COMPLETED,\n          payload: { contactNo: { ...data, verified: false }, id: id }\n        });\n      } else {\n        dispatch({\n          type: SENDING_OTP_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {}\n  };\n};\n\nexport const verifyOtp = (data = {}, id) => {\n  return async dispatch => {\n    try {\n      dispatch({ type: VERIFYING_OTP });\n\n      const response = await doRequest({\n        method: REQUEST_TYPE.POST,\n        data: { otp: data, id },\n        url: Phone.getVerifyOtpURL()\n      });\n\n      const { status, payload } = response;\n\n      if (status) {\n        dispatch({\n          type: VERIFYING_OTP_COMPLETED,\n          payload: {\n            contactNo: { verified: true },\n            id: id,\n            show_otp_modal: false\n          }\n        });\n      } else {\n        dispatch({\n          type: VERIFYING_OTP_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {}\n  };\n};\n\nexport default (state = initialState, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case VERIFYING_OTP:\n      return {\n        ...state,\n        is_otp_verifying: true,\n        is_otp_verified: false,\n        is_otp_error: false,\n        otp_error: {}\n      };\n\n    case VERIFYING_OTP_COMPLETED:\n      return {\n        ...state,\n        is_otp_verifying: false,\n        is_otp_verified: true,\n        is_otp_error: false,\n        otp_error: {}\n      };\n    case VERIFYING_OTP_COMPLETED_WITH_ERROR:\n      return {\n        ...state,\n        is_otp_verifying: false,\n        is_otp_verified: false,\n        is_otp_error: true,\n        otp_error: payload\n      };\n    case SENDING_OTP:\n      return {\n        is_sending_otp: true,\n        error: {}\n      };\n\n    case SENDING_OTP_COMPLETED:\n      return {\n        ...state,\n        is_sending_otp: false,\n        is_otp_send: true,\n        is_otp_error: false,\n        error: {}\n      };\n\n    case SENDING_OTP_COMPLETED_WITH_ERROR:\n      return {\n        is_sending_otp: false,\n        is_otp_send: false,\n        is_otp_error: true,\n        otp_error: payload\n      };\n\n    case RESET: {\n      return initialState;\n    }\n    default:\n      return state;\n  }\n};\n","import { doRequest } from \"../../Helper/network\";\nimport { Event } from \"../../Helper/urls\";\nimport { REQUEST_TYPE } from \"../../constant\";\nimport {\n  DISCHARGE_PATIENT_REQUEST,\n  DISCHARGE_PATIENT_REQUEST_COMPLETED,\n  DISCHARGE_PATIENT_REQUEST_COMPLETED_WITH_ERROR,\n  VERIFY_DOCUMENT_REQUEST,\n  VERIFY_DOCUMENT_REQUEST_COMPLETED,\n  VERIFY_DOCUMENT_REQUEST_COMPLETED_WITH_ERROR,\n  REUPLOAD_IDPROOF_REQUEST,\n  REUPLOAD_IDPROOF_REQUEST_COMPLETED,\n  REUPLOAD_IDPROOF_REQUEST_COMPLETED_WITH_ERROR,\n  REUPLOAD_CONSENTFORM_REQUEST,\n  REUPLOAD_CONSENTFORM_REQUEST_COMPLETED,\n  REUPLOAD_CONSENTFORM_REQUEST_COMPLETED_WITH_ERROR\n} from \"../user\";\nimport {\n  CANCEL_APPOINTMENT,\n  CANCEL_APPOINTMENT_COMPLETED,\n  CANCEL_APPOINTMENT_COMPLETED_WITH_ERROR,\n  CANCEL_REMINDER,\n  CANCEL_REMINDER_COMPLETED,\n  CANCEL_REMINDER_COMPLETED_WITH_ERROR,\n  RESCHEDULE,\n  RESCHEDULE_COMPLETED,\n  RESCHEDULE_COMPLETED_WITH_ERROR,\n  EDIT_NOTES,\n  EDIT_NOTES_COMPLETED,\n  EDIT_NOTES_COMPLETED_WITH_ERROR\n} from \"../events\";\n\nimport {\n  SHARING_ARTICLE,\n  SHARING_ARTICLE_COMPLETED,\n  SHARING_ARTICLE_COMPLETED_WITH_ERROR\n} from \"../articles\";\n\nimport { CHANGING_PASSWORD_COMPLETED } from \"../page/changePassword\";\n\nconst OPEN_MODAL = \"OPEN_MODAL\";\nconst CLOSE_MODAL = \"CLOSE_MODAL\";\n\nconst CREATING_APPOINTMENT_REQUEST = \"CREATING_APPOINTMENT_REQUEST\";\nexport const CREATING_APPOINTMENT_REQUEST_COMPLETED =\n  \"CREATING_APPOINTMENT_REQUEST_COMPLETED\";\nconst CREATING_APPOINTMENT_REQUEST_COMPLETED_WITH_ERROR =\n  \"CREATING_APPOINTMENT_REQUEST_COMPLETED_WITH_ERROR\";\n\nconst CREATING_REMINDER_REQUEST = \"CREATING_REMINDER_REQUEST\";\nexport const CREATING_REMINDER_REQUEST_COMPLETED =\n  \"CREATING_REMINDER_REQUEST_COMPLETED\";\nconst CREATING_REMINDER_REQUEST_COMPLETED_WITH_ERROR =\n  \"CREATING_REMINDER_REQUEST_COMPLETED_WITH_ERROR\";\n\nconst CREATING_ADVERSE_EVENT_REQUEST = \"CREATING_ADVERSE_EVENT_REQUEST\";\nexport const CREATING_ADVERSE_EVENT_REQUEST_COMPLETED =\n  \"CREATING_ADVERSE_EVENT_REQUEST_COMPLETED\";\nconst CREATING_ADVERSE_EVENT_REQUEST_COMPLETED_WITH_ERROR =\n  \"CREATING_ADVERSE_EVENT_REQUEST_COMPLETED_WITH_ERROR\";\n\nconst CLEAR_ERROR = \"CLEAR_ERROR\";\n\nconst initialState = {\n  show: false\n};\n\n//data is for extra data pass to the containers on modal open\nexport const open = (modalType, entityId, purpose, data) => {\n  return dispatch => {\n    dispatch({\n      type: OPEN_MODAL,\n      payload: { modalType, entityId: entityId, purpose, data }\n    });\n  };\n};\n\nexport const close = () => {\n  return dispatch => {\n    dispatch({ type: CLOSE_MODAL });\n  };\n};\n\nexport const clearMsg = () => {\n  return { type: CLEAR_ERROR };\n};\n\nexport const addAppointment = data => {\n  return async dispatch => {\n    try {\n      dispatch({ type: CREATING_APPOINTMENT_REQUEST });\n      const response = await doRequest({\n        method: REQUEST_TYPE.POST,\n        data: data,\n        url: Event.getAddAppointmentURL()\n      });\n\n      if (response.status === false) {\n        dispatch({\n          type: CREATING_APPOINTMENT_REQUEST_COMPLETED_WITH_ERROR,\n          payload: { error: response.payload.error }\n        });\n      } else if (response.status === true) {\n        dispatch({\n          type: CREATING_APPOINTMENT_REQUEST_COMPLETED,\n          payload: response.payload\n        });\n      }\n\n      return response;\n    } catch (err) {\n      throw err;\n    }\n  };\n};\n\nexport const addReminder = data => {\n  return async dispatch => {\n    try {\n      dispatch({ type: CREATING_REMINDER_REQUEST });\n      const response = await doRequest({\n        method: REQUEST_TYPE.POST,\n        data: data,\n        url: Event.getAddReminderURL()\n      });\n\n      if (response.status === false) {\n        dispatch({\n          type: CREATING_REMINDER_REQUEST_COMPLETED_WITH_ERROR,\n          payload: { error: response.payload.error }\n        });\n      } else if (response.status === true) {\n        dispatch({\n          type: CREATING_REMINDER_REQUEST_COMPLETED,\n          payload: response.payload\n        });\n      }\n    } catch (err) {\n      throw err;\n    }\n  };\n};\n\nexport const reportAdverseEvent = data => {\n  return async dispatch => {\n    try {\n      dispatch({ type: CREATING_ADVERSE_EVENT_REQUEST });\n      const response = await doRequest({\n        method: REQUEST_TYPE.POST,\n        data: data,\n        url: Event.getCreateAdverseEventURL()\n      });\n\n      if (response.status === false) {\n        dispatch({\n          type: CREATING_ADVERSE_EVENT_REQUEST_COMPLETED_WITH_ERROR,\n          payload: { error: response.payload.error }\n        });\n      } else if (response.status === true) {\n        dispatch({\n          type: CREATING_ADVERSE_EVENT_REQUEST_COMPLETED,\n          payload: response.payload\n        });\n      }\n    } catch (err) {\n      throw err;\n    }\n  };\n};\n\nexport default (state = initialState, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case OPEN_MODAL:\n      return {\n        show: true,\n        modalType: payload.modalType,\n        entityId: payload.entityId,\n        purpose: payload.purpose,\n        data: payload.data,\n        subentity: payload.data\n      };\n\n    case CLOSE_MODAL:\n      return {\n        show: false\n      };\n    case CREATING_APPOINTMENT_REQUEST:\n    case CREATING_REMINDER_REQUEST:\n    case DISCHARGE_PATIENT_REQUEST:\n    case CANCEL_APPOINTMENT:\n    case CANCEL_REMINDER:\n    case VERIFY_DOCUMENT_REQUEST:\n    case CREATING_ADVERSE_EVENT_REQUEST:\n    case REUPLOAD_IDPROOF_REQUEST:\n    case REUPLOAD_CONSENTFORM_REQUEST:\n    case RESCHEDULE:\n    case EDIT_NOTES:\n    case SHARING_ARTICLE:\n      return { ...state, requesting: true };\n    case CREATING_APPOINTMENT_REQUEST_COMPLETED:\n    case CREATING_REMINDER_REQUEST_COMPLETED:\n    case DISCHARGE_PATIENT_REQUEST_COMPLETED:\n    case CANCEL_APPOINTMENT_COMPLETED:\n    case CANCEL_REMINDER_COMPLETED:\n    case VERIFY_DOCUMENT_REQUEST_COMPLETED:\n    case CREATING_ADVERSE_EVENT_REQUEST_COMPLETED:\n    case EDIT_NOTES_COMPLETED:\n    case RESCHEDULE_COMPLETED:\n    case CHANGING_PASSWORD_COMPLETED:\n    case SHARING_ARTICLE_COMPLETED:\n      return {\n        show: false,\n        requesting: false\n      };\n    case CREATING_APPOINTMENT_REQUEST_COMPLETED_WITH_ERROR:\n    case CREATING_REMINDER_REQUEST_COMPLETED_WITH_ERROR:\n    case DISCHARGE_PATIENT_REQUEST_COMPLETED_WITH_ERROR:\n    case CANCEL_APPOINTMENT_COMPLETED_WITH_ERROR:\n    case CANCEL_REMINDER_COMPLETED_WITH_ERROR:\n    case VERIFY_DOCUMENT_REQUEST_COMPLETED_WITH_ERROR:\n    case CREATING_ADVERSE_EVENT_REQUEST_COMPLETED_WITH_ERROR:\n    case REUPLOAD_IDPROOF_REQUEST_COMPLETED_WITH_ERROR:\n    case REUPLOAD_CONSENTFORM_REQUEST_COMPLETED_WITH_ERROR:\n    case EDIT_NOTES_COMPLETED_WITH_ERROR:\n    case RESCHEDULE_COMPLETED_WITH_ERROR:\n    case SHARING_ARTICLE_COMPLETED_WITH_ERROR:\n      return {\n        ...state,\n        requesting: false,\n        is_error: false,\n        error: payload.error\n      };\n\n    case REUPLOAD_IDPROOF_REQUEST_COMPLETED:\n    case REUPLOAD_CONSENTFORM_REQUEST_COMPLETED:\n      return {\n        ...state,\n        show: true,\n        requesting: false\n      };\n    case CLEAR_ERROR:\n      return {\n        ...state,\n        error: {}\n      };\n    default:\n      return state;\n  }\n};\n","import { doRequest } from \"../../Helper/network\";\nimport { Auth } from \"../../Helper/urls\";\nimport { REQUEST_TYPE, path, USER_CATEGORY } from \"../../constant\";\nimport config from \"../../config\";\nimport {\n  FETCHING_PROGRAMS_DATA_COMPLETED_WITH_ERROR,\n  FETCHING_CURRENT_PROGRAM_DETAILS_COMPLETED_WITH_ERROR\n} from \"../program\";\nimport { FETCHING_SURVEY_TEMPLATE_PROGRAM_COMPLETED_WITH_ERROR } from \"../page/createSurvey\";\nimport { FETCHING_SURVEY_TEMPLATES_COMPLETED_WITH_ERROR } from \"../surveyTemplate\";\nimport { FETCHING_SURVEYS_BY_ID_COMPLETED_WITH_ERROR } from \"../survey\";\nimport { FETCHING_ARTICLE_BY_ID_COMPLETED_WITH_ERROR } from \"../articles\";\n\nconst SIGNING = \"SIGNING\";\nexport const SIGNING_COMPLETED = \"SIGNING_COMPLETED\";\nconst SIGNING_COMPLETED_WITH_ERROR = \"SIGNING_COMPLETED_WITH_ERROR\";\n\nconst SIGNING_UP = \"SIGNING_UP\";\nexport const SIGNING_UP_COMPLETED = \"SIGNING_UP_COMPLETED\";\nconst SIGNING_UP_COMPLETED_WITH_ERROR = \"SIGNING_UP_COMPLETED_WITH_ERROR\";\n\nconst VALIDATING_LINK = \"VALIDATING_LINK\";\nconst VALIDATING_LINK_COMPLETED = \"VALIDATING_LINK_COMPLETED\";\nconst VALIDATING_LINK_COMPLETED_WITH_ERROR =\n  \"VALIDATING_LINK_COMPLETED_WITH_ERROR\";\n\nconst SIGNING_OUT = \"SIGNING_OUT\";\nconst SIGNING_OUT_COMPLETED = \"SIGNING_OUT_COMPLETED\";\n// const SIGNING_OUT_COMPLETED_WITH_ERROR = \"SIGNING_OUT_COMPLETED_WITH_ERROR\";\n\nconst GETTING_INITIAL_DATA = \"GETTING_INITIAL_DATA\";\nexport const GETTING_INITIAL_DATA_COMPLETED = \"GETTING_INITIAL_DATA_COMPLETED\";\nconst GETTING_INITIAL_DATA_COMPLETED_WITH_ERROR =\n  \"GETTING_INITIAL_DATA_COMPLETED_WITH_ERROR\";\n\nconst RESET_ERROR = \"RESET_ERROR\";\n\nexport const RESET_UNAUTHORIZED_ERROR = \"RESET_UNAUTHORIZED_ERROR\";\n\nconst intial_state = {};\n\nconst getRedirectLink = user => {\n  const {\n    isIdProofUploaded,\n    isConsentFormUploaded,\n    isProfileCompleted,\n    settings: { isCalendarSynced },\n    basicInfo: { category }\n  } = user;\n  let redirectTo = \"\";\n  if (!isCalendarSynced && config.CALENDAR_SYNC === true) {\n    redirectTo = path.CALENDAR_SYNC;\n  } else if (\n    category === USER_CATEGORY.PATIENT &&\n    (!isConsentFormUploaded || !isIdProofUploaded)\n  ) {\n    redirectTo = path.PROFILE_SETUP;\n  } else if (!isProfileCompleted) {\n    redirectTo = path.EDIT_PROFILE;\n  }\n  return redirectTo;\n};\n\nexport const setUnauthorizedError = state => {\n  return { ...state, unauthorizedError: true };\n};\n\nexport const resetUnauthorizedError = state => {\n  return { type: RESET_UNAUTHORIZED_ERROR };\n};\n\nexport const clearError = () => {\n  return { type: RESET_ERROR };\n};\n\nexport const signIn = (data = {}) => {\n  return async (dispatch, getState) => {\n    try {\n      const { auth = {} } = getState();\n      dispatch({ type: SIGNING });\n      const response = await doRequest({\n        method: REQUEST_TYPE.POST,\n        data: data,\n        url: Auth.getSignInURL()\n      });\n\n      if (response.status === false) {\n        dispatch({\n          type: SIGNING_COMPLETED_WITH_ERROR,\n          payload: { error: response.payload.error }\n        });\n      } else if (response.status === true) {\n        const { lastUrl = false } = data;\n        const { _id, users } = response.payload.data;\n        let authRedirection = getRedirectLink(users[_id]);\n        if (authRedirection.length === 0) {\n          if (lastUrl && auth.unauthorizedError !== undefined) {\n            authRedirection = lastUrl;\n          } else {\n            authRedirection = \"/\";\n          }\n        }\n        dispatch({\n          type: SIGNING_COMPLETED,\n          payload: {\n            users: response.payload.data.users,\n            authenticatedUser: _id,\n            authRedirection\n          }\n        });\n      }\n    } catch (err) {\n      throw err;\n    }\n  };\n};\n\nexport const signOut = (data = {}) => {\n  return async dispatch => {\n    try {\n      dispatch({ type: SIGNING_OUT });\n      let response = await doRequest({\n        method: REQUEST_TYPE.POST,\n        url: Auth.getSignOutURL()\n      });\n\n      const { status } = response;\n      if (status === true) {\n        dispatch({ type: SIGNING_OUT_COMPLETED });\n        //window.location.href = \"/\";\n      } //think and right for other cases\n      return status;\n    } catch (err) {\n      throw err;\n    }\n  };\n};\n\nexport const validateLink = (data = {}) => {\n  return async dispatch => {\n    try {\n      dispatch({ type: VALIDATING_LINK });\n      let response = await doRequest({\n        method: REQUEST_TYPE.POST,\n        data: data,\n        url: Auth.getValidateLinkURL()\n      });\n      if (response.status === false) {\n        dispatch({\n          type: VALIDATING_LINK_COMPLETED_WITH_ERROR,\n          payload: { error: response.payload.error }\n        });\n      } else {\n        dispatch({\n          type: VALIDATING_LINK_COMPLETED,\n          payload: {\n            email: response.payload.data.email,\n            category: response.payload.data.category,\n            invitationLink: data.link\n          }\n        });\n      }\n    } catch (err) {\n      throw err;\n    }\n  };\n};\n\nexport const onAppStart = () => {\n  return async dispatch => {\n    try {\n      const countries = await doRequest({\n        method: REQUEST_TYPE.GET,\n        url: \"/getCountries\"\n      });\n      dispatch({ type: GETTING_INITIAL_DATA });\n      const response = await doRequest({\n        method: REQUEST_TYPE.GET,\n        url: Auth.getOnAppStartURl()\n      });\n      if (response.status === false) {\n        dispatch({\n          type: GETTING_INITIAL_DATA_COMPLETED_WITH_ERROR,\n          payload: {\n            countryCities: { countries: countries.payload.data.country }\n          }\n        });\n      }\n      if (response.status === true) {\n        const { data } = response.payload;\n        const { users, _id } = data;\n        const redirectTo = getRedirectLink(users[_id]);\n\n        dispatch({\n          type: GETTING_INITIAL_DATA_COMPLETED,\n          payload: {\n            authenticatedUser: data._id,\n            users: data.users,\n            countryCities: { countries: countries.payload.data.country },\n            authRedirection: redirectTo\n          }\n        });\n      }\n    } catch (err) {\n      dispatch({\n        type: GETTING_INITIAL_DATA_COMPLETED_WITH_ERROR\n      });\n    }\n  };\n};\n\nexport const signUp = (data = {}) => {\n  return async dispatch => {\n    try {\n      dispatch({ type: SIGNING_UP });\n      let response = await doRequest({\n        method: REQUEST_TYPE.POST,\n        data: data,\n        url: Auth.getSignUpURL()\n      });\n\n      if (response.status === false) {\n        dispatch({\n          type: SIGNING_UP_COMPLETED_WITH_ERROR,\n          payload: { error: response.payload.error }\n        });\n      } else if (response.status === true) {\n        const { data } = response.payload;\n        const { users, _id } = data;\n        const redirectTo = getRedirectLink(users[_id]);\n        dispatch({\n          type: SIGNING_UP_COMPLETED,\n          payload: {\n            authRedirection: redirectTo,\n            authenticatedUser: response.payload.data._id,\n            users: response.payload.data.users\n          }\n        });\n      }\n    } catch (err) {\n      throw err;\n    }\n  };\n};\n\nfunction unsetUnathorizedError(state) {\n  const { unauthorizedError } = state;\n  if (unauthorizedError) {\n    return {\n      ...state,\n      unauthorizedError: false\n    };\n  }\n  return state;\n}\n\nexport default (state = intial_state, action = {}) => {\n  const { type, payload } = action;\n  //\n  switch (type) {\n    case GETTING_INITIAL_DATA_COMPLETED: {\n      return {\n        authenticated: true,\n        authenticated_user: payload.authenticatedUser,\n        authRedirection: payload.authRedirection\n      };\n    }\n    case GETTING_INITIAL_DATA_COMPLETED_WITH_ERROR:\n      return {\n        authenticated: false,\n        unauthorizedError: true\n      };\n\n    case SIGNING_COMPLETED_WITH_ERROR:\n      return {\n        authenticated: false,\n        error: payload.error\n      };\n\n    case SIGNING_COMPLETED:\n      return {\n        authenticated: true,\n        isProfileCompleted: payload.isProfileCompleted,\n        isCalendarSynced: payload.isCalendarSynced,\n        authenticated_user: payload.authenticatedUser,\n        authRedirection: payload.authRedirection\n      };\n\n    case SIGNING_OUT_COMPLETED:\n      return {\n        authenticated: false,\n        authRedirection: \"/\"\n      };\n\n    case VALIDATING_LINK_COMPLETED_WITH_ERROR:\n      return {\n        ...state,\n        validLink: false,\n        error: payload.error\n      };\n\n    case VALIDATING_LINK_COMPLETED:\n      return {\n        ...state,\n        validLink: true,\n        email: payload.email,\n        category: payload.category,\n        invitationLink: payload.invitationLink\n      };\n\n    case SIGNING_UP_COMPLETED_WITH_ERROR:\n      return {\n        authenticated: false,\n        error: payload.error\n      };\n\n    case SIGNING_UP_COMPLETED:\n      return {\n        ...state,\n        authenticated: true,\n        authenticated_user: payload.authenticatedUser,\n        authRedirection: payload.authRedirection,\n        unauthorizedError: false\n      };\n\n    case FETCHING_PROGRAMS_DATA_COMPLETED_WITH_ERROR:\n    case FETCHING_CURRENT_PROGRAM_DETAILS_COMPLETED_WITH_ERROR:\n    case FETCHING_SURVEY_TEMPLATE_PROGRAM_COMPLETED_WITH_ERROR:\n    case FETCHING_SURVEY_TEMPLATES_COMPLETED_WITH_ERROR:\n    case FETCHING_SURVEYS_BY_ID_COMPLETED_WITH_ERROR:\n    case FETCHING_ARTICLE_BY_ID_COMPLETED_WITH_ERROR:\n      return setUnauthorizedError(state);\n\n    case RESET_ERROR:\n      return {\n        ...state,\n        error: null\n      };\n\n    case RESET_UNAUTHORIZED_ERROR:\n      return unsetUnathorizedError(state);\n\n    default: {\n      //attach redirect logic here when user is not authenticated and try to do task as an authorized user\n      return state;\n    }\n  }\n};\n","import { doRequest } from \"../../Helper/network\";\nimport { Survey, User } from \"../../Helper/urls\";\nimport { REQUEST_TYPE } from \"../../constant\";\n\nconst FETCHING_SURVEYS = \"FETCHING_SURVEYS\";\nconst FETCHING_SURVEYS_COMPLETED = \"FETCHING_SURVEYS_COMPLETED\";\nconst FETCHING_SURVEYS_COMPLETED_WITH_ERROR =\n  \"FETCHING_SURVEYS_COMPLETED_WITH_ERROR\";\nconst CREATING_SURVEYS = \"CREATING_SURVEYS\";\nexport const CREATING_SURVEYS_COMPLETED = \"CREATING_SURVEYS_COMPLETED\";\nconst CREATING_SURVEYS_COMPLETED_WITH_ERROR =\n  \"CREATING_SURVEYS_COMPLETED_WITH_ERROR\";\nconst ENDING_SURVEYS = \"ENDING_SURVEYS\";\nconst ENDING_SURVEYS_COMPLETED = \"ENDING_SURVEYS_COMPLETED\";\nconst ENDING_SURVEYS_COMPLETED_WITH_ERROR =\n  \"ENDING_SURVEYS_COMPLETED_WITH_ERROR\";\n\nconst FETCHING_SURVEYS_BY_ID = \"FETCHING_SURVEYS_BY_ID\";\nconst FETCHING_SURVEYS_BY_ID_COMPLETED = \"FETCHING_SURVEYS_BY_ID_COMPLETED\";\nexport const FETCHING_SURVEYS_BY_ID_COMPLETED_WITH_ERROR =\n  \"FETCHING_SURVEYS_BY_ID_COMPLETED_WITH_ERROR\";\n\nconst ADDING_RESPONSE = \"ADDING_RESPONSE\";\nconst ADDING_RESPONSE_COMPLETED = \"ADDING_RESPONSE_COMPLETED\";\nconst ADDING_RESPONSE_COMPLETED_WITH_ERROR =\n  \"ADDING_RESPONSE_COMPLETED_WITH_ERROR\";\n\nconst FETCHING_PARTICIPANTS_BY_STATUS = \"FETCHING_PARTICIPANTS_BY_STATUS\";\nconst FETCHING_PARTICIPANTS_BY_STATUS_COMPLETED =\n  \"FETCHING_PARTICIPANTS_BY_STATUS_COMPLETED\";\nconst FETCHING_PARTICIPANTS_BY_STATUS_COMPLETED_WITH_ERROR =\n  \"FETCHING_PARTICIPANTS_BY_STATUS_COMPLETED_WITH_ERROR\";\n\nconst FETCHING_CARECOACH_SURVEYS = \"FETCHING_CARECOACH_SURVEYS\";\nconst FETCHING_CARECOACH_SURVEYS_COMPLETED =\n  \"FETCHING_CARECOACH_SURVEYS_COMPLETED\";\nconst FETCHING_CARECOACH_SURVEYS_COMPLETED_WITH_ERROR =\n  \"FETCHING_CARECOACH_SURVEYS_COMPLETED_WITH_ERROR\";\n\nconst FETCH_RECENTLY_SENT_SURVEYS = \"FETCH_RECENTLY_SENT_SURVEYS\";\nconst FETCH_RECENTLY_SENT_SURVEYS_COMPLETED =\n  \"FETCH_RECENTLY_SENT_SURVEYS_COMPLETED\";\nconst FETCH_RECENTLY_SENT_SURVEYS_COMPLETED_WITH_ERROR =\n  \"FETCH_RECENTLY_SENT_SURVEYS_COMPLETED_WITH_ERROR\";\n\nfunction setSurvey(state, data) {\n  const { surveys } = data;\n  if (surveys) {\n    const prevsurveys = { ...state };\n    let newState = Object.assign({}, prevsurveys, surveys);\n    return { ...newState };\n  } else {\n    return state;\n  }\n}\n\nconst setRecentSurveys = (state, data) => {\n  const recentSurveys = Object.keys(data);\n  return {\n    ...state,\n    ...data,\n    recentlyAdded: recentSurveys\n  };\n};\n\nexport const createSurveys = data => {\n  return async dispatch => {\n    try {\n      dispatch({ type: CREATING_SURVEYS });\n      let response = await doRequest({\n        data,\n        method: REQUEST_TYPE.POST,\n        url: Survey.getCreateSurveyURL()\n      });\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: CREATING_SURVEYS_COMPLETED,\n          payload: { data: payload.data, message: payload.message }\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: CREATING_SURVEYS_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n      return status;\n    } catch (error) {\n      throw error;\n      //\n    }\n  };\n};\n\nexport const updateSurveys = (data, surveyId) => {\n  return async dispatch => {\n    try {\n      dispatch({ type: CREATING_SURVEYS });\n      let response = await doRequest({\n        data,\n        method: REQUEST_TYPE.POST,\n        url: Survey.getUpdateSurveyCompletedURL(surveyId)\n      });\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: CREATING_SURVEYS_COMPLETED,\n          payload: { data: payload.data, message: payload.message }\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: CREATING_SURVEYS_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n      return status;\n    } catch (error) {\n      throw error;\n      //\n    }\n  };\n};\n\nexport const fetchSurveys = Status => {\n  return async dispatch => {\n    try {\n      dispatch({ type: FETCHING_SURVEYS });\n      let response = await doRequest({\n        method: REQUEST_TYPE.GET,\n        url: Survey.getFetchSurveyByStatusURL(Status)\n      });\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: FETCHING_SURVEYS_COMPLETED,\n          payload: payload.data\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: FETCHING_SURVEYS_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {\n      throw error;\n      //\n    }\n  };\n};\n\nexport const fetchCareCoachSurveys = () => {\n  return async dispatch => {\n    try {\n      dispatch({ type: FETCHING_CARECOACH_SURVEYS });\n      let response = await doRequest({\n        method: REQUEST_TYPE.GET,\n        url: User.fetchCareCoachSurveyURL()\n      });\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: FETCHING_CARECOACH_SURVEYS_COMPLETED,\n          payload: payload.data\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: FETCHING_CARECOACH_SURVEYS_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {\n      throw error;\n      //\n    }\n  };\n};\n\nexport const fetchSurveysById = surveyId => {\n  return async dispatch => {\n    try {\n      dispatch({ type: FETCHING_SURVEYS_BY_ID });\n      let response = await doRequest({\n        method: REQUEST_TYPE.GET,\n        url: Survey.getSurveyByIdURL(surveyId)\n      });\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: FETCHING_SURVEYS_BY_ID_COMPLETED,\n          payload: payload.data\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: FETCHING_SURVEYS_BY_ID_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n      return response;\n    } catch (error) {\n      throw error;\n      //\n    }\n  };\n};\n\nexport const endSurveys = surveyId => {\n  return async dispatch => {\n    try {\n      dispatch({ type: ENDING_SURVEYS });\n      let response = await doRequest({\n        method: REQUEST_TYPE.GET,\n        url: Survey.getSurveyEndURL(surveyId)\n      });\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: ENDING_SURVEYS_COMPLETED,\n          payload: payload.data\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: ENDING_SURVEYS_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {\n      throw error;\n      //\n    }\n  };\n};\n\nexport const addResponse = (surveyId, data, completedOn) => {\n  return async dispatch => {\n    try {\n      dispatch({ type: ADDING_RESPONSE });\n      let response = await doRequest({\n        data: { data, completedOn },\n        method: REQUEST_TYPE.POST,\n        url: Survey.getAddParticipantResponseURL(surveyId)\n      });\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: ADDING_RESPONSE_COMPLETED,\n          payload: payload.data\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: ADDING_RESPONSE_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {\n      throw error;\n      //\n    }\n  };\n};\n\nexport const fetchPaticipantForSurveyBasedOnStatus = (surveyId, Status) => {\n  return async dispatch => {\n    try {\n      dispatch({ type: FETCHING_PARTICIPANTS_BY_STATUS });\n      let response = await doRequest({\n        method: REQUEST_TYPE.GET,\n        url: Survey.getFetchParticicpantByStatusURL(surveyId, Status)\n      });\n      //\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: FETCHING_PARTICIPANTS_BY_STATUS_COMPLETED,\n          payload: payload.data,\n          surveyId: surveyId\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: FETCHING_PARTICIPANTS_BY_STATUS_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {\n      throw error;\n      //\n    }\n  };\n};\n\nexport const fetchRecentlySentSurveys = (programIds, statuses) => {\n  return async dispatch => {\n    try {\n      dispatch({ type: FETCH_RECENTLY_SENT_SURVEYS });\n      let response = await doRequest({\n        method: REQUEST_TYPE.GET,\n        url: Survey.getRecentlySentSurveysURL(),\n        params: {\n          programIds: JSON.stringify(programIds),\n          statuses: statuses ? JSON.stringify(statuses) : []\n        }\n      });\n      const { status, payload } = response;\n\n      if (status === true) {\n        dispatch({\n          type: FETCH_RECENTLY_SENT_SURVEYS_COMPLETED,\n          payload: payload.data\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: FETCH_RECENTLY_SENT_SURVEYS_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {}\n  };\n};\n\nconst intialState = {\n  is_error: false,\n  is_created: false,\n  error: \"\"\n};\n\nexport default (state = intialState, action) => {\n  const { type, payload = {}, message, surveyId } = action;\n  switch (type) {\n    case FETCHING_SURVEYS_COMPLETED:\n      return setSurvey(state, payload);\n    case FETCHING_SURVEYS_BY_ID_COMPLETED:\n      return setSurvey(state, payload);\n    case FETCHING_SURVEYS_COMPLETED_WITH_ERROR:\n      return {\n        ...state\n      };\n    case FETCHING_PARTICIPANTS_BY_STATUS_COMPLETED: {\n      const { participantsId } = payload;\n      return {\n        ...state,\n        participantsId: { [surveyId]: participantsId }\n      };\n    }\n    case FETCH_RECENTLY_SENT_SURVEYS_COMPLETED: {\n      return setRecentSurveys(state, payload);\n    }\n    default:\n      return setSurvey(state, payload, message);\n  }\n};\n","import { doRequest } from \"../../Helper/network\";\nimport { medicalCondition } from \"../../Helper/urls\";\nimport { REQUEST_TYPE } from \"../../constant\";\nimport moment from \"moment\";\n\nconst intialState = {};\n\nexport const SAVING_BASIC_CONDITION_COMPLETED =\n  \"SAVING_BASIC_CONDITION_COMPLETED\";\nconst SAVING_BASIC_CONDITION_COMPLETED_WITH_ERROR =\n  \"SAVING_BASIC_CONDITION_COMPLETED_WITH_ERROR\";\nexport const SAVING_VITAL_COMPLETED = \"SAVING_VITAL_COMPLETED\";\nconst SAVING_VITAL_COMPLETED_WITH_ERROR = \"SAVING_VITAL_COMPLETED_WITH_ERROR\";\nexport const SAVING_CLINICAL_READING_COMPLETED =\n  \"SAVING_CLINICAL_READING_COMPLETED\";\nconst SAVING_CLINICAL_READING_COMPLETED_WITH_ERROR =\n  \"SAVING_CLINICAL_READING_COMPLETED_WITH_ERROR\";\n\nfunction setMedicalsData(state, data) {\n  const { medicalsData } = data;\n  // (\"==medicalsData state=\", { ...state, ...medicalsData } )\n  if (medicalsData) {\n    return { ...state, ...medicalsData };\n  } else {\n    return state;\n  }\n}\n\nexport const saveBasicConditionData = (\n  medicalConditionId,\n  data = {},\n  userId\n) => {\n  return async dispatch => {\n    try {\n      const response = await doRequest({\n        data: data,\n        url: medicalCondition.getEditBasicConditionURL(medicalConditionId),\n        method: REQUEST_TYPE.POST\n      });\n\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: SAVING_BASIC_CONDITION_COMPLETED,\n          payload: {\n            message: payload.message,\n            basicCondition: data,\n            userId: userId\n          }\n        });\n      } else if (status === false) {\n        dispatch({\n          type: SAVING_BASIC_CONDITION_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (err) {\n      throw new Error(err);\n    }\n  };\n};\n\nexport const addVitalData = (medicalConditionId, data = {}, userId) => {\n  return async dispatch => {\n    try {\n      const response = await doRequest({\n        data: data,\n        url: medicalCondition.getAddVitalURL(medicalConditionId),\n        method: REQUEST_TYPE.POST\n      });\n      //\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: SAVING_VITAL_COMPLETED,\n          payload: { message: payload.message, vital: data, userId: userId }\n        });\n      } else if (status === false) {\n        dispatch({\n          type: SAVING_VITAL_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (err) {\n      throw new Error(err);\n    }\n  };\n};\n\nexport const UpdateClinicalReadingData = (\n  medicalConditionId,\n  data = {},\n  userId\n) => {\n  // (\"update the users clinicalATA \", medicalConditionId)\n  return async dispatch => {\n    try {\n      const response = await doRequest({\n        data: data,\n        url: medicalCondition.getUpdateClinicalReadingURL(medicalConditionId),\n        method: REQUEST_TYPE.POST\n      });\n      //\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: SAVING_CLINICAL_READING_COMPLETED,\n          payload: {\n            message: payload.message,\n            clinicalReadings: data,\n            userId: userId\n          }\n        });\n      } else if (status === false) {\n        dispatch({\n          type: SAVING_CLINICAL_READING_COMPLETED_WITH_ERROR,\n          payload: \"payload.error\"\n        });\n      }\n    } catch (err) {\n      throw new Error(err);\n    }\n  };\n};\n\nexport default (state = intialState, action) => {\n  const { type, payload = {} } = action;\n\n  switch (type) {\n    case SAVING_BASIC_CONDITION_COMPLETED: {\n      const { basicCondition, userId } = payload;\n      let newState = { ...state };\n      newState[userId][\"basicCondition\"] = basicCondition;\n      // (\"this is the reducer of the medicals\",newState[userId])\n      return {\n        ...newState\n      };\n    }\n    case SAVING_VITAL_COMPLETED: {\n      const { vital, userId } = payload;\n      let newState = { ...state };\n      newState[userId][\"vitals\"] = vital;\n      // (\"this is the reducer of the medicals\",newState[userId])\n      return {\n        ...newState\n      };\n    }\n    case SAVING_CLINICAL_READING_COMPLETED: {\n      let { clinicalReadings, userId } = payload;\n      const updateAt = moment().format();\n      let test = Object.keys(clinicalReadings);\n      const testName = test[0];\n      let clinicalReading = {};\n      clinicalReading.data = clinicalReadings[testName];\n      clinicalReading.updatedAt = updateAt;\n\n      let newState = { ...state };\n\n      newState[userId][\"clinicalReadings\"][testName] = Object.assign(\n        {},\n        newState[userId][\"clinicalReadings\"][testName],\n        clinicalReading\n      );\n      // newState[userId][\"clinicalReadings\"][testName].updatedAt = Object.assign(newState[userId][\"clinicalReadings\"][testName].updatedAt,updateAt);\n      return {\n        ...newState\n      };\n    }\n\n    default:\n      return setMedicalsData(state, payload);\n  }\n};\n","import { doRequest } from \"../../../Helper/network\";\nimport { User } from \"../../../Helper/urls\";\nimport { REQUEST_TYPE } from \"../../../constant\";\n\nconst CHANGING_PASSWORD = \"CHANGING_PASSWORD\";\nexport const CHANGING_PASSWORD_COMPLETED = \"CHANGING_PASSWORD_COMPLETED\";\nconst CHANGING_PASSWORD_COMPLETED_WITH_ERROR =\n  \"CHANGING_PASSWORD_COMPLETED_WITH_ERROR\";\n\nconst intial_state = {};\n\nexport const changePassword = data => {\n  return async dispatch => {\n    try {\n      dispatch({ type: CHANGING_PASSWORD });\n      let response = await doRequest({\n        method: REQUEST_TYPE.POST,\n        data: data,\n        url: User.getChangePasswordURL()\n      });\n\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({ type: CHANGING_PASSWORD_COMPLETED, payload });\n      } else if (status === false) {\n        dispatch({\n          type: CHANGING_PASSWORD_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (err) {\n      throw new Error(err);\n    }\n  };\n};\n\nexport default (state = intial_state, action) => {\n  const { type, payload = {} } = action;\n  switch (type) {\n    case CHANGING_PASSWORD:\n      return {\n        ...state,\n        is_password_changing: true,\n        is_password_changed: false,\n        is_changing_password_error: false,\n        change_password_error: {}\n      };\n    case CHANGING_PASSWORD_COMPLETED:\n      return {\n        ...state,\n        is_password_changing: false,\n        is_password_changed: true,\n        is_changing_password_error: false,\n        change_password_error: {}\n      };\n    case CHANGING_PASSWORD_COMPLETED_WITH_ERROR:\n      return {\n        ...state,\n        is_password_changing: false,\n        is_password_changed: false,\n        is_changing_password_error: true,\n        change_password_error: payload\n      };\n    default:\n      return state;\n  }\n};\n","export default {\n  CALENDAR_SYNC: JSON.parse(process.env.REACT_APP_CALENDAR_SYNC),\n  BASE_DOC_URL: process.env.REACT_APP_IMAGE_HOST,\n  BASE_URL: process.env.REACT_APP_BASE_URL\n};\n","import { doRequest } from \"../../Helper/network\";\nimport { Survey } from \"../../Helper/urls\";\nimport { REQUEST_TYPE } from \"../../constant\";\nconst intialState = {};\n\nconst FETCHING_SURVEY_TEMPLATES = \"FETCHING_SURVEY_TEMPLATES\";\nconst FETCHING_SURVEY_TEMPLATES_COMPLETED =\n  \"FETCHING_SURVEY_TEMPLATES_COMPLETED\";\nexport const FETCHING_SURVEY_TEMPLATES_COMPLETED_WITH_ERROR =\n  \"FETCHING_SURVEY_TEMPLATES_COMPLETED_WITH_ERROR\";\n\nfunction setSurveyTemplates(state, data) {\n  const { templates } = data;\n  if (templates) {\n    const prevtemplates = { ...state };\n    let newState = Object.assign({}, prevtemplates, templates);\n    return newState;\n  } else {\n    return state;\n  }\n}\n\nexport const fetchSurveyTemplates = () => {\n  return async dispatch => {\n    try {\n      dispatch({ type: FETCHING_SURVEY_TEMPLATES });\n      let response = await doRequest({\n        method: REQUEST_TYPE.GET,\n        url: Survey.getSurveyTemplateListURL()\n      });\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: FETCHING_SURVEY_TEMPLATES_COMPLETED,\n          payload: payload.data\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: FETCHING_SURVEY_TEMPLATES_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {\n      throw error;\n      //\n    }\n  };\n};\n\nexport default (state = intialState, action) => {\n  const { type, payload = {} } = action;\n  switch (type) {\n    case FETCHING_SURVEY_TEMPLATES_COMPLETED:\n      return setSurveyTemplates(state, payload);\n    default:\n      return setSurveyTemplates(state, payload);\n  }\n};\n","import { doRequest } from \"../../../Helper/network\";\nimport { User } from \"../../../Helper/urls\";\nimport { REQUEST_TYPE } from \"../../../constant\";\nimport { VERIFYING_OTP_COMPLETED } from \"../../phone\";\nimport { CHANGING_PROFILE_PIC_COMPLETED } from \"../changeProfilePic\";\n\nconst RESET_MSG = \"RESET_EDIT_PROFILE_MSG\";\nconst SHOW_PROFILE_PIC_MODAL = \"SHOW_PROFILE_PIC_MODAL\";\nconst CLOSE_PROFILE_PIC_MODAL = \"CLOSE_PROFILE_PIC_MODAL\";\n\nconst SHOW_OTP_MODAL = \"SHOW_OTP_MODAL\";\nconst CLOSE_OTP_MODAL = \"CLOSE_OTP_MODAL\";\n\n// const SAVING_USER = \"SAVING_USER\";\nexport const SAVING_USER_COMPLETED = \"SAVING_USER_COMPLETED\";\nconst SAVING_USER_COMPLETED_WITH_ERROR = \"SAVING_USER_COMPLETED_WITH_ERROR\";\n\nconst FETCHING_USER_DATA = \"FETCHING_USER_DATA\";\nconst FETCHING_USER_DATA_COMPLETED = \"FETCHING_USER_DATA_COMPLETED\";\nconst FETCHING_USER_DATA_COMPLETED_WITH_ERROR =\n  \"FETCHING_USER_DATA_COMPLETED_WITH_ERROR\";\n\nexport const openProfilePicModal = () => {\n  return dispatch => {\n    dispatch({ type: SHOW_PROFILE_PIC_MODAL });\n  };\n};\n\nexport const closeProfilePicModal = () => {\n  return dispatch => {\n    dispatch({ type: CLOSE_PROFILE_PIC_MODAL });\n  };\n};\n\nexport const openOtpModal = () => {\n  return dispatch => {\n    dispatch({ type: SHOW_OTP_MODAL });\n  };\n};\n\nexport const closeOtpModal = () => {\n  return dispatch => {\n    dispatch({ type: CLOSE_OTP_MODAL });\n  };\n};\n\nexport const saveUserData = (data = {}) => {\n  return async dispatch => {\n    const { userId } = data;\n    try {\n      const response = await doRequest({\n        data: data,\n        url: User.getEditProfileURL(),\n        method: REQUEST_TYPE.POST\n      });\n\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: SAVING_USER_COMPLETED,\n          payload: { message: payload.message, userId: userId }\n        });\n      } else if (status === false) {\n        dispatch({\n          type: SAVING_USER_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (err) {\n      throw new Error(err);\n    }\n  };\n};\n\nexport const fetchUser = user_id => {\n  return async (dispatch, getState) => {\n    const state = getState();\n    const {\n      auth: { authenticated_user }\n    } = state;\n\n    try {\n      dispatch({ type: FETCHING_USER_DATA });\n      let url = User.getMyProfileURL();\n\n      if (user_id) {\n        url = User.getUserByIdURL(user_id);\n      }\n      const response = await doRequest({\n        method: REQUEST_TYPE.GET,\n        url: url\n      });\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: FETCHING_USER_DATA_COMPLETED,\n          payload: {\n            ...payload.data,\n            currentUserId: user_id ? user_id : authenticated_user\n          }\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: FETCHING_USER_DATA_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {}\n  };\n};\n\nexport const clearMsg = () => {\n  return dispatch => {\n    dispatch({ type: RESET_MSG });\n  };\n};\n\nconst initial_state = {\n  show_otp_modal: false,\n  show_profile_pic_modal: false\n};\n\nexport default (state = initial_state, action) => {\n  const { type, payload = {} } = action;\n  switch (type) {\n    case SAVING_USER_COMPLETED: {\n      return {\n        ...state,\n        success_msg: payload.message,\n        is_profile_saved: true,\n        is_profile_error: false,\n        profile_error: {}\n      };\n    }\n    case SAVING_USER_COMPLETED_WITH_ERROR: {\n      return {\n        ...state,\n        success_msg: null,\n        is_profile_error: true,\n        is_profile_saved: false,\n        profile_error: payload\n      };\n    }\n    case FETCHING_USER_DATA:\n      return {\n        ...state,\n        isLoading: true\n      };\n    case FETCHING_USER_DATA_COMPLETED:\n      return {\n        ...state,\n        current_user_id: payload.currentUserId,\n        isLoading: false\n      };\n    case FETCHING_USER_DATA_COMPLETED_WITH_ERROR:\n      return {\n        isLoading: false,\n        error: payload\n      };\n    case VERIFYING_OTP_COMPLETED:\n      return {\n        ...state,\n        show_otp_modal: false\n      };\n    case CHANGING_PROFILE_PIC_COMPLETED:\n      return {\n        ...state,\n        show_profile_pic_modal: false\n      };\n\n    case RESET_MSG: {\n      return {\n        ...state,\n        profile_error: null,\n        is_profile_error: false,\n        success_msg: null,\n        is_profile_saved: false\n      };\n    }\n    case SHOW_OTP_MODAL:\n      return { ...state, show_otp_modal: true };\n    case SHOW_PROFILE_PIC_MODAL:\n      return { ...state, show_profile_pic_modal: true };\n    case CLOSE_OTP_MODAL:\n      return { ...state, show_otp_modal: false };\n    case CLOSE_PROFILE_PIC_MODAL:\n      return { ...state, show_profile_pic_modal: false };\n    default: {\n      return state;\n    }\n  }\n};\n","import { REQUEST_TYPE } from \"../../../constant\";\nimport { Survey } from \"../../../Helper/urls\";\nimport { doRequest } from \"../../../Helper/network\";\nimport intersection from \"lodash-es/intersection\";\n\nconst FETCHING_SURVEY_QUESTIONS = \"FETCHING_SURVEY_QUESTIONS\";\nconst FETCHING_SURVEY_QUESTIONS_COMPLETED =\n  \"FETCHING_SURVEY_QUESTIONS_COMPLETED\";\nconst FETCHING_SURVEY_QUESTIONS_COMPLETED_WITH_ERROR =\n  \"FETCHING_SURVEY_QUESTIONS_COMPLETED_WITH_ERROR\";\n\nconst FETCHING_SURVEY_TEMPLATE_PROGRAM = \"FETCHING_SURVEY_TEMPLATE_PROGRAM\";\nconst FETCHING_SURVEY_TEMPLATE_PROGRAM_COMPLETED =\n  \"FETCHING_SURVEY_TEMPLATE_PROGRAM_COMPLETED\";\nexport const FETCHING_SURVEY_TEMPLATE_PROGRAM_COMPLETED_WITH_ERROR =\n  \"FETCHING_SURVEY_TEMPLATE_PROGRAM_COMPLETED_WITH_ERROR\";\n\nconst setProgramPatients = (state, data = {}, programId) => {\n  const { patients } = data;\n\n  if (patients) {\n    // console.log(\"patiuentsssss ====> \", JSON.stringify(patients))\n    let newState = { ...state };\n    newState[programId] = patients;\n    return { ...newState };\n  } else {\n    return state;\n  }\n};\n\nconst setAvailableProgramForSurvey = (state, data = {}) => {\n  let newState = { ...state };\n  newState.availableProgram = data;\n  return { ...newState };\n};\n\nconst setQuestions = (state, data = {}) => {\n  const { questions } = data;\n  if (questions) {\n    const newState = state;\n    newState.questions = questions;\n    return { ...newState };\n  } else {\n    return state;\n  }\n};\n\nexport const fetchQuestions = surveyTemplateId => {\n  return async dispatch => {\n    try {\n      if (surveyTemplateId) {\n        dispatch({ type: FETCHING_SURVEY_QUESTIONS });\n        let response = await doRequest({\n          method: REQUEST_TYPE.GET,\n          url: Survey.getTemplatesQuestionURL(surveyTemplateId)\n        });\n        const { status, payload } = response;\n        if (status === true) {\n          dispatch({\n            type: FETCHING_SURVEY_QUESTIONS_COMPLETED,\n            payload: payload.data\n          });\n        } else if (response.status === false) {\n          dispatch({\n            type: FETCHING_SURVEY_QUESTIONS_COMPLETED_WITH_ERROR,\n            payload: payload.error\n          });\n        }\n      }\n    } catch (error) {\n      throw error;\n      //\n    }\n  };\n};\n\nexport const getValidProgramForSurvey = surveyTemplateId => {\n  return async (dispatch, getState) => {\n    try {\n      const store = getState();\n      const { programs, surveytemplates } = store;\n      const careCoachPrograms = Object.keys(programs);\n      const selectedTemplate = surveytemplates[surveyTemplateId]\n        ? surveytemplates[surveyTemplateId]\n        : {};\n      const { programs: selectedTemplateProgram = [] } = selectedTemplate;\n      const intersectionOfProgram = intersection(\n        careCoachPrograms,\n        selectedTemplateProgram\n      );\n      dispatch({ type: FETCHING_SURVEY_TEMPLATE_PROGRAM });\n      let response = await doRequest({\n        method: REQUEST_TYPE.GET,\n        url: Survey.getSurveyTemplateProgramURL(surveyTemplateId)\n      });\n      const { status, payload = {} } = response;\n      if (status) {\n        const { surveyDetail = [] } = payload.data;\n        const surveyProgram = surveyDetail.map(singleSurvey => {\n          return singleSurvey.program;\n        });\n        const availableProgram = intersectionOfProgram.filter(program => {\n          if (surveyProgram.includes(program)) {\n            return false;\n          }\n          return true;\n        });\n        dispatch({\n          type: FETCHING_SURVEY_TEMPLATE_PROGRAM_COMPLETED,\n          payload: availableProgram\n        });\n      } else if (status === false) {\n        dispatch({\n          type: FETCHING_SURVEY_TEMPLATE_PROGRAM_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {\n      throw error;\n    }\n  };\n};\n\nconst initialState = {\n  questions: [],\n  availableProgram: []\n};\n\nexport default (state = initialState, action) => {\n  const { type, payload = {}, programId = \"\" } = action;\n  switch (type) {\n    case FETCHING_SURVEY_QUESTIONS_COMPLETED: {\n      return setQuestions(state, payload);\n    }\n    case FETCHING_SURVEY_TEMPLATE_PROGRAM_COMPLETED: {\n      return setAvailableProgramForSurvey(state, payload);\n    }\n    default: {\n      return setProgramPatients(state, payload, programId);\n    }\n  }\n};\n","import { doRequest } from \"../../../Helper/network\";\nimport { User } from \"../../../Helper/urls\";\nimport { REQUEST_TYPE } from \"../../../constant\";\n\nconst CHANGING_PROFILE_PIC = \"CHANGING_PROFILE_PIC\";\nexport const CHANGING_PROFILE_PIC_COMPLETED = \"CHANGING_PROFILE_PIC_COMPLETED\";\nconst CHANGING_PROFILE_PIC_COMPLETED_WITH_ERROR =\n  \"CHANGING_PROFILE_PIC_COMPLETED_WITH_ERROR\";\n\nconst intial_state = {};\n\nexport const changeProfilePic = (data, id) => {\n  return async dispatch => {\n    try {\n      dispatch({ type: CHANGING_PROFILE_PIC });\n      let response = await doRequest({\n        method: REQUEST_TYPE.POST,\n        data: data,\n        headers: { \"Content-Type\": \"multipart/form-data\" },\n        url: User.getChangeProfilePicURL(id),\n        params: { id: id }\n      });\n\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: CHANGING_PROFILE_PIC_COMPLETED,\n          payload: { id: id, profilePicUrl: payload.data.pic_url }\n        });\n      } else if (status === false) {\n        dispatch({\n          type: CHANGING_PROFILE_PIC_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (err) {\n      throw new Error(err);\n    }\n  };\n};\n\nexport default (state = intial_state, action) => {\n  const { type, payload = {} } = action;\n  switch (type) {\n    case CHANGING_PROFILE_PIC:\n      return {\n        ...state,\n        is_profile_pic_changing: true,\n        is_profile_pic_changed: false,\n        is_profile_pic_changing_error: false,\n        profile_pic_changing_error: {}\n      };\n    case CHANGING_PROFILE_PIC_COMPLETED:\n      return {\n        ...state,\n        is_profile_pic_changing: false,\n        is_profile_pic_changed: true,\n        is_profile_pic_changing_error: false,\n        profile_pic_changing_error: {}\n      };\n    case CHANGING_PROFILE_PIC_COMPLETED_WITH_ERROR:\n      return {\n        ...state,\n        is_profile_pic_changing: false,\n        is_profile_pic_changed: false,\n        is_profile_pic_changing_error: true,\n        profile_pic_changing_error: payload\n      };\n    default:\n      return state;\n  }\n};\n","import { doRequest } from \"../../Helper/network\";\nimport { User } from \"../../Helper/urls\";\nimport { REQUEST_TYPE } from \"../../constant\";\nconst intialState = {};\n\nconst FETCHING_DOCTOR_HOSPITALS_DATA = \"FETCHING_DOCTOR_HOSPITALS_DATA\";\nconst FETCHING_DOCTOR_HOSPITALS_DATA_COMPLETED =\n  \"FETCHING_DOCTOR_HOSPITALS_DATA_COMPLETED\";\nconst FETCHING_DOCTOR_HOSPITALS_DATA_COMPLETED_WITH_ERROR =\n  \"FETCHING_DOCTOR_HOSPITALS_DATA_COMPLETED_WITH_ERROR\";\n\nconst FETCHING_HOSPITALS_DATA = \"FETCHING_HOSPITALS_DATA\";\nconst FETCHING_HOSPITALS_DATA_COMPLETED = \"FETCHING_HOSPITALS_DATA_COMPLETED\";\nconst FETCHING_HOSPITALS_DATA_COMPLETED_WITH_ERROR =\n  \"FETCHING_HOSPITALS_DATA_COMPLETED_WITH_ERROR\";\n\nconst setDoctorHospitals = (state, data) => {\n  const currentState = Object.assign({}, state);\n  const doctorHospitalsData = Object.assign({}, currentState.hospitalData);\n  const newDoctorHospitalsData = Object.assign(doctorHospitalsData, data);\n  return Object.assign(currentState, { ...newDoctorHospitalsData });\n};\n\nconst setHospitals = (state, data) => {\n  const newHospitalsData = Object.assign({}, data);\n  return Object.assign({}, state, { ...newHospitalsData });\n};\n\nconst setIntialHospitalData = (state, data = {}) => {\n  const { hospitals } = data;\n  if (hospitals) {\n    const prevHospital = state;\n    const updatedHospital = { ...prevHospital, ...hospitals };\n    return updatedHospital;\n  } else return state;\n};\n\nexport const fetchDoctorHospitals = doctorId => {\n  return async dispatch => {\n    try {\n      dispatch({ type: FETCHING_DOCTOR_HOSPITALS_DATA });\n      let response = await doRequest({\n        method: REQUEST_TYPE.GET,\n        url: User.getDoctorHospitalsURL(doctorId)\n      });\n\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: FETCHING_DOCTOR_HOSPITALS_DATA_COMPLETED,\n          payload: payload.data\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: FETCHING_DOCTOR_HOSPITALS_DATA_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {}\n  };\n};\n\nexport const fetchHospitals = (countryId, cityId) => {\n  return async dispatch => {\n    try {\n      dispatch({ type: FETCHING_HOSPITALS_DATA });\n      let response = await doRequest({\n        method: REQUEST_TYPE.GET,\n        url: User.getHospitalsURL(),\n        params: { countryId: countryId, cityId: cityId }\n      });\n\n      const { status, payload } = response;\n\n      if (status === true) {\n        dispatch({\n          type: FETCHING_HOSPITALS_DATA_COMPLETED,\n          payload: payload.data\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: FETCHING_HOSPITALS_DATA_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {}\n  };\n};\n\nexport default (state = intialState, action) => {\n  const { type, payload = {} } = action;\n  switch (type) {\n    case FETCHING_DOCTOR_HOSPITALS_DATA_COMPLETED: {\n      return setDoctorHospitals(state, payload);\n    }\n    case FETCHING_HOSPITALS_DATA_COMPLETED: {\n      return setHospitals(state, payload);\n    }\n    default:\n      return setIntialHospitalData(state, payload);\n  }\n};\n","import { REQUEST_TYPE } from \"../../../constant\";\nimport { User } from \"../../../Helper/urls\";\nimport { doRequest } from \"../../../Helper/network\";\n\nimport { FETCH_ADVERSE_EVENT_COMPLETED } from \"../../../modules/events\";\n\nconst FETCHING_PATIENT_DATA_BY_ID = \"FETCHING_PATIENT_DATA_BY_ID\";\nconst FETCHING_PATIENT_DATA_BY_ID_COMPLETED =\n  \"FETCHING_PATIENT_DATA_BY_ID_COMPLETED\";\nconst FETCHING_PATIENT_DATA_BY_ID_COMPLETED_WITH_ERROR =\n  \"FETCHING_PATIENT_DATA_BY_ID_COMPLETED_WITH_ERROR\";\n\nexport const fetchPatient = userId => {\n  return async dispatch => {\n    dispatch({ type: FETCHING_PATIENT_DATA_BY_ID });\n    try {\n      const response = await doRequest({\n        url: User.getUserByIdURL(userId),\n        method: REQUEST_TYPE.GET\n      });\n\n      const { status, payload } = response;\n      const { data } = payload;\n      if (status === true) {\n        dispatch({\n          type: FETCHING_PATIENT_DATA_BY_ID_COMPLETED,\n          payload: { ...data, userId }\n        });\n      } else if (status === false) {\n        dispatch({\n          type: FETCHING_PATIENT_DATA_BY_ID_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n      return status;\n    } catch (err) {\n      throw new Error(err);\n    }\n  };\n};\n\nconst setAdverseEvent = (state, data) => {\n  const { adverseEvent } = data;\n  return { ...state, adverseEvent: adverseEvent };\n};\n\nconst initial_state = {\n  id: \"\",\n  is_error: false,\n  is_loading: true,\n  is_data_loaded: false,\n  error: \"\"\n};\n\nexport default (state = initial_state, action) => {\n  const { type, payload = {} } = action;\n  switch (type) {\n    case FETCHING_PATIENT_DATA_BY_ID: {\n      return {\n        ...state,\n        is_loading: true\n      };\n    }\n\n    case FETCHING_PATIENT_DATA_BY_ID_COMPLETED: {\n      return {\n        ...state,\n        id: payload.userId,\n        is_loading: false,\n        is_data_loaded: true\n      };\n    }\n    case FETCHING_PATIENT_DATA_BY_ID_COMPLETED_WITH_ERROR: {\n      return {\n        ...state,\n        is_error: true,\n        error: payload.error,\n        is_loading: false,\n        is_data_loaded: false\n      };\n    }\n    case FETCH_ADVERSE_EVENT_COMPLETED:\n      return setAdverseEvent(state, payload);\n    default: {\n      return state;\n    }\n  }\n};\n","import { doRequest } from \"../../Helper/network\";\nimport { medication } from \"../../Helper/urls\";\nimport { REQUEST_TYPE } from \"../../constant\";\nconst intialState = {};\n\nconst SAVING_MEDICATION_COMPLETED = \"SAVING_MEDICATION_COMPLETED\";\nconst SAVING_MEDICATION_COMPLETED_WITH_ERROR =\n  \"SAVING_MEDICATION_COMPLETED_WITH_ERROR\";\n\nconst DELETING_MEDICATION_COMPLETED = \"DELETING_MEDICATION_COMPLETED\";\nconst DELETING_MEDICATION_COMPLETED_WITH_ERROR =\n  \"DELETING_MEDICATION_COMPLETED_WITH_ERROR\";\n\nconst GETTING_RECENT_MEDICATION_COMPLETED =\n  \"GETTING_RECENT_MEDICATION_COMPLETED\";\nconst GETTING_RECENT_MEDICATION_COMPLETED_WITH_ERROR =\n  \"GETTING_RECENT_MEDICATION_COMPLETED_WITH_ERROR\";\n\nfunction setMedication(state, data) {\n  const { medication } = data;\n  if (medication) {\n    return { ...state, ...medication };\n  } else {\n    return state;\n  }\n}\n\nexport const getRecentMedication = id => {\n  return async dispatch => {\n    try {\n      const response = await doRequest({\n        url: medication.getRecentMedicationURL(id),\n        method: REQUEST_TYPE.GET\n      });\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: GETTING_RECENT_MEDICATION_COMPLETED,\n          payload: payload.data\n        });\n      } else if (status === false) {\n        dispatch({\n          type: GETTING_RECENT_MEDICATION_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (err) {\n      throw new Error(err);\n    }\n  };\n};\n\nexport const addMedication = (data = {}, userId) => {\n  return async dispatch => {\n    try {\n      const response = await doRequest({\n        data: { value: data, userId: userId },\n        url: medication.getAddMedicationURL(),\n        method: REQUEST_TYPE.POST\n      });\n\n      const { status, payload } = response;\n\n      if (status === true) {\n        dispatch({\n          type: SAVING_MEDICATION_COMPLETED,\n          payload: {\n            message: payload.message,\n            medication: payload.data,\n            userId: userId\n          }\n        });\n      } else if (status === false) {\n        dispatch({\n          type: SAVING_MEDICATION_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (err) {\n      throw new Error(err);\n    }\n  };\n};\n\nexport const removeMedication = (productId = {}, userId) => {\n  return async dispatch => {\n    try {\n      const response = await doRequest({\n        data: { productId, userId },\n        url: medication.getAddMedicationURL(),\n        method: REQUEST_TYPE.DELETE\n      });\n\n      const { status, payload } = response;\n\n      if (status === true) {\n        dispatch({\n          type: DELETING_MEDICATION_COMPLETED,\n          payload: {\n            message: payload.message,\n            productId: productId,\n            userId: userId\n          }\n        });\n      } else if (status === false) {\n        dispatch({\n          type: DELETING_MEDICATION_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (err) {\n      throw new Error(err);\n    }\n  };\n};\n\nexport default (state = intialState, action) => {\n  const { type, payload = {} } = action;\n  // const {medication} = payload\n  switch (type) {\n    case SAVING_MEDICATION_COMPLETED: {\n      const { medication, userId } = payload;\n      let newState = { ...state };\n      if (newState[userId].medicine) {\n        newState[userId].medicine = Object.assign(\n          newState[userId].medicine,\n          medication.medication.medicine\n        );\n      } else {\n        newState[userId].medicine = [medication];\n      }\n\n      return {\n        ...newState\n      };\n    }\n    case DELETING_MEDICATION_COMPLETED: {\n      const { productId, userId } = payload;\n      let newState = { ...state };\n      delete newState[userId].medicine[productId];\n      return {\n        ...newState\n      };\n    }\n\n    default:\n      return setMedication(state, payload);\n  }\n};\n","export const getAddAppointmentURL = () => {\n  return \"/appointments\";\n};\n\nexport const getAddReminderURL = () => {\n  return \"/reminders\";\n};\n\nexport const getAppointments = (userId, startDate, endDate) => {\n  return `/appointments?userId=${userId}&startDate=${startDate}&endDate=${endDate}`;\n};\n\nexport const getAppointmentsHistory = userId => {\n  return `users/${userId}/appointments/history`;\n};\n\nexport const getCancelAppointment = (eventId, all) => {\n  return `/appointments/delete?id=${eventId}&all=${all}`;\n};\n\nexport const getCancelReminderURL = (eventId, all) => {\n  return `/reminders/delete?id=${eventId}&all=${all}`;\n};\n\nexport const getCreateAdverseEventURL = () => {\n  return `/adverse-events`;\n};\n\nexport const getRescheduleAppointmentURL = id => {\n  return `/appointments/${id}/re-schedule`;\n};\n\nexport const getEditNotesURL = id => {\n  return `/appointments/${id}/edit-notes`;\n};\n\nexport const getEditReminderURL = id => {\n  return `/reminders/${id}/edit`;\n};\n\nexport const getEditNotesReminderURL = id => {\n  return `/reminders/${id}/edit-notes`;\n};\n\nexport const setAppointmentStatusURL = eventId => {\n  return `/events/${eventId}/status`;\n};\n\nexport const getFetchAdverseEvent = userId => {\n  return `/users/${userId}/adverse-events`;\n};\n\nexport const getLastEditedEvent = () => {\n  return \"/events/lastEdited\";\n};\n\nexport const getEventUsers = eventId => {\n  return `/events/${eventId}/eventUsers`;\n};\n\nexport const getEventDataById = eventId => {\n  return `/events/eventData/${eventId}`;\n};\n\nexport const getBookedSlotsURL = () => {\n  return `/events/booked-timeslot`;\n};\n\nexport const addVideoRoomParticipantsURL = eventId => {\n  return `/events/${eventId}/addVideoRoomParticipants`;\n};\n","import { doRequest } from \"../../Helper/network\";\nimport { REQUEST_TYPE } from \"../../constant\";\n\nconst GETTING_COUNTRIES = \"getting_countries\";\nconst GETTING_CITIES_BY_COUNTRY = \"getting_cities_by_countries\";\nconst GET_COUNTRIES_COMPLETED = \"get_countries_completed\";\nconst GET_CITIES_BY_COUNTRY_COMPLETED = \"get_cities_by_countries_completed\";\n\n//const api\nconst GET_CITIES = \"/getCitiesByCountry/\";\nconst GET_COUNTRIES = \"/getCountries\";\n\nexport const getCountries = () => {\n  return async dispatch => {\n    try {\n      dispatch({ type: GETTING_COUNTRIES });\n      const response = await doRequest({\n        method: REQUEST_TYPE.GET,\n        url: GET_COUNTRIES\n      });\n      const { status, payload } = response;\n      if (status) {\n        dispatch({\n          type: GET_COUNTRIES_COMPLETED,\n          payload: {\n            countryList: payload.data.country\n          }\n        });\n      }\n    } catch (error) {\n      throw error;\n    }\n  };\n};\n\nexport const getCities = country => {\n  return async dispatch => {\n    try {\n      dispatch({ type: GETTING_CITIES_BY_COUNTRY });\n      const response = await doRequest({\n        method: REQUEST_TYPE.GET,\n        url: GET_CITIES + country\n      });\n      const { status, payload } = response;\n      if (status) {\n        dispatch({\n          type: GET_CITIES_BY_COUNTRY_COMPLETED,\n          payload: {\n            [country]: { cities: payload.data.cities }\n          }\n        });\n      }\n    } catch (error) {\n      throw error;\n    }\n  };\n};\n\nconst addCities = (data, state) => {\n  const currentState = Object.assign({}, state);\n  const countriesData = Object.assign({}, currentState.cities);\n  const newCountriesData = Object.assign(countriesData, data);\n  return Object.assign(\n    currentState,\n    { cities: { ...newCountriesData } },\n    { isLoading: false }\n  );\n};\n\nconst intialState = {\n  countries: {},\n  cities: {},\n  isLoading: false\n};\n\nfunction setCountryCitiesData(state, incomingData = {}) {\n  const { countryCities } = incomingData;\n  if (countryCities) {\n    //Data comes in countriesList instead of countries\n    const { countries: newList = {}, cities: newData = {} } = countryCities;\n    const { countries: prevList = {}, cities: prevData = {} } = state;\n    //\n\n    // let citiesData = {};\n\n    // for (let id in newList) {\n    //   if (newList[id]) {\n    //     citiesData = Object.assign(citiesData, {\n    //       [id]: {\n    //         cities: { [newL[id]]: newData[newL[id]] }\n    //       }\n    //     });\n    //   }\n    // }\n\n    const newState = {\n      countries: { ...prevList, ...newList },\n      cities: { ...prevData, ...newData }\n    };\n    //\n    //\n    return newState;\n  } else {\n    return state;\n  }\n}\n// const intialState = {};\n\nexport default (state = intialState, action) => {\n  switch (action.type) {\n    case GETTING_COUNTRIES:\n      return { ...state, isLoading: true };\n    case GET_COUNTRIES_COMPLETED:\n      return {\n        ...state,\n        isLoading: false,\n        countries: action.payload.countryList\n      };\n    case GETTING_CITIES_BY_COUNTRY:\n      return { ...state, isLoading: true };\n    case GET_CITIES_BY_COUNTRY_COMPLETED:\n      return addCities(action.payload, state);\n    default:\n      return setCountryCitiesData(state, action.payload);\n  }\n};\n","import { doRequest } from \"../../Helper/network\";\nimport { User } from \"../../Helper/urls\";\nimport { REQUEST_TYPE } from \"../../constant\";\n\nconst FETCHING_INSURANCE_PROVIDERS_DATA = \"FETCHING_INSURANCE_PROVIDERS_DATA\";\nconst FETCHING_INSURANCE_PROVIDERS_DATA_COMPLETED =\n  \"FETCHING_INSURANCE_PROVIDERS_DATA_COMPLETED\";\nconst FETCHING_INSURANCE_PROVIDERS_DATA_COMPLETED_WITH_ERROR =\n  \"FETCHING_INSURANCE_PROVIDERS_DATA_COMPLETED_WITH_ERROR\";\n\nconst intialState = {};\n\nfunction setInsuranceData(state, data) {\n  const { insuranceProviders } = data;\n  if (insuranceProviders) {\n    return { ...state, ...insuranceProviders };\n  } else {\n    return state;\n  }\n}\n\nexport const fetchInsuranceData = () => {\n  return async dispatch => {\n    try {\n      dispatch({ type: FETCHING_INSURANCE_PROVIDERS_DATA });\n      let response = await doRequest({\n        method: REQUEST_TYPE.GET,\n        url: User.getInsuranceProvidersURL()\n      });\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({\n          type: FETCHING_INSURANCE_PROVIDERS_DATA_COMPLETED,\n          payload: payload.data\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: FETCHING_INSURANCE_PROVIDERS_DATA_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {}\n  };\n};\n\nexport default (state = intialState, action) => {\n  const { type, payload = {} } = action;\n\n  switch (type) {\n    case FETCHING_INSURANCE_PROVIDERS_DATA_COMPLETED: {\n      return setInsuranceData(state, payload);\n    }\n    default:\n      return setInsuranceData(state, payload);\n  }\n};\n","import { REQUEST_TYPE } from \"../../../constant\";\nimport { Survey } from \"../../../Helper/urls\";\nimport { doRequest } from \"../../../Helper/network\";\n\nconst FETCHING_PATIENT_RESPONSE = \"FETCHING_PATIENT_RESPONSE\";\nconst FETCHING_PATIENT_RESPONSE_COMPLETED =\n  \"FETCHING_PATIENT_RESPONSE_COMPLETED\";\nconst FETCHING_PATIENT_RESPONSE_COMPLETED_WITH_ERROR =\n  \"FETCHING_PATIENT_RESPONSE_COMPLETED_WITH_ERROR\";\n\nexport const fetchPatientresponse = (surveyId, patientId) => {\n  return async dispatch => {\n    dispatch({ type: FETCHING_PATIENT_RESPONSE });\n    try {\n      const response = await doRequest({\n        url: Survey.getFetchPatientResponURL(surveyId, patientId),\n        method: REQUEST_TYPE.GET\n      });\n      const { status, payload } = response;\n      const { data } = payload;\n      if (status === true) {\n        dispatch({\n          type: FETCHING_PATIENT_RESPONSE_COMPLETED,\n          payload: { ...data }\n        });\n      } else if (status === false) {\n        dispatch({\n          type: FETCHING_PATIENT_RESPONSE_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (err) {\n      throw new Error(err);\n    }\n  };\n};\n\nconst initial_state = {\n  id: \"\",\n  is_error: false,\n  is_loading: true,\n  error: \"\"\n};\n\nexport default (state = initial_state, action) => {\n  const { type, payload = {} } = action;\n  switch (type) {\n    case FETCHING_PATIENT_RESPONSE: {\n      return {\n        ...state,\n        is_loading: true\n      };\n    }\n\n    case FETCHING_PATIENT_RESPONSE_COMPLETED: {\n      const { responses, completedOn } = payload;\n      return {\n        ...state,\n        response: responses,\n        completedOn: completedOn\n      };\n    }\n    case FETCHING_PATIENT_RESPONSE_COMPLETED_WITH_ERROR: {\n      return {\n        ...state,\n        is_error: true,\n        error: payload.error,\n        is_loading: false\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n","import { REQUEST_TYPE } from \"../../../constant\";\nimport { User } from \"../../../Helper/urls\";\nimport { doRequest } from \"../../../Helper/network\";\n\nconst FETCHING_DOCTOR_DATA_BY_ID = \"FETCHING_DOCTOR_DATA_BY_ID\";\nconst FETCHING_DOCTOR_DATA_BY_ID_COMPLETED =\n  \"FETCHING_DOCTOR_DATA_BY_ID_COMPLETED\";\nconst FETCHING_DOCTOR_DATA_BY_ID_COMPLETED_WITH_ERROR =\n  \"FETCHING_DOCTOR_DATA_BY_ID_COMPLETED_WITH_ERROR\";\n\nexport const fetchDoctor = userId => {\n  return async dispatch => {\n    dispatch({ type: FETCHING_DOCTOR_DATA_BY_ID });\n    try {\n      const response = await doRequest({\n        url: User.getUserByIdURL(userId),\n        method: REQUEST_TYPE.GET\n      });\n\n      const { status, payload } = response;\n      const { message, data } = payload;\n      if (status === true) {\n        dispatch({\n          type: FETCHING_DOCTOR_DATA_BY_ID_COMPLETED,\n          payload: { ...data, userId, message }\n        });\n      } else if (status === false) {\n        dispatch({\n          type: FETCHING_DOCTOR_DATA_BY_ID_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (err) {\n      throw new Error(err);\n    }\n  };\n};\n\nconst initial_state = {\n  id: \"\",\n  is_error: false,\n  is_loading: true,\n  error: \"\"\n};\n\nexport default (state = initial_state, action) => {\n  const { type, payload = {} } = action;\n  switch (type) {\n    case FETCHING_DOCTOR_DATA_BY_ID: {\n      return {\n        ...state,\n        is_loading: true\n      };\n    }\n\n    case FETCHING_DOCTOR_DATA_BY_ID_COMPLETED: {\n      return {\n        ...state,\n        id: payload.userId,\n        is_loading: false\n      };\n    }\n    case FETCHING_DOCTOR_DATA_BY_ID_COMPLETED_WITH_ERROR: {\n      return {\n        ...state,\n        is_error: true,\n        error: payload.error,\n        is_loading: false\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n","import {\n  CREATING_ADVERSE_EVENT_REQUEST_COMPLETED,\n  CREATING_REMINDER_REQUEST_COMPLETED,\n  CREATING_APPOINTMENT_REQUEST_COMPLETED\n} from \"../modals\";\n\nimport {\n  CANCEL_APPOINTMENT_COMPLETED,\n  RESCHEDULE_COMPLETED,\n  EDIT_NOTES_COMPLETED,\n  CANCEL_REMINDER_COMPLETED\n} from \"../events\";\n\nimport {\n  SAVING_BASIC_CONDITION_COMPLETED,\n  SAVING_VITAL_COMPLETED,\n  SAVING_CLINICAL_READING_COMPLETED\n} from \"../medical\";\n\nimport {\n  SHARING_ARTICLE_COMPLETED,\n  MAKE_FAVOURITE_UNFAVOURITE_COMPLETE\n} from \"../articles\";\n\nimport { DISCHARGE_PATIENT_REQUEST_COMPLETED } from \"../user\";\nimport { CREATING_SURVEYS_COMPLETED } from \"../survey\";\n\nimport { CHANGING_PASSWORD_COMPLETED } from \"../page/changePassword\";\n\nconst CLEAR_MSG = \"CLEAR_MSG\";\nconst SHOW_MSG = \"SHOW_MSG\";\n\nconst initialState = {};\n\nexport const clearMsg = () => {\n  return dispatch => {\n    dispatch({ type: CLEAR_MSG });\n  };\n};\n\nexport const showMsg = msg => {\n  return dispatch => {\n    dispatch({ type: SHOW_MSG, message: msg });\n  };\n};\n\nexport default (state = initialState, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case CREATING_ADVERSE_EVENT_REQUEST_COMPLETED:\n    case CREATING_APPOINTMENT_REQUEST_COMPLETED:\n    case CREATING_REMINDER_REQUEST_COMPLETED:\n    case CANCEL_APPOINTMENT_COMPLETED:\n    case RESCHEDULE_COMPLETED:\n    case EDIT_NOTES_COMPLETED:\n    case CREATING_SURVEYS_COMPLETED:\n    case SAVING_BASIC_CONDITION_COMPLETED:\n    case SAVING_VITAL_COMPLETED:\n    case SAVING_CLINICAL_READING_COMPLETED:\n    case DISCHARGE_PATIENT_REQUEST_COMPLETED:\n    case CANCEL_REMINDER_COMPLETED:\n    case CHANGING_PASSWORD_COMPLETED:\n    case SHARING_ARTICLE_COMPLETED:\n    case MAKE_FAVOURITE_UNFAVOURITE_COMPLETE:\n    case SHOW_MSG:\n      return {\n        msg: payload.message\n      };\n    case CLEAR_MSG:\n      return {};\n    default:\n      return state;\n  }\n};\n","import { doRequest } from \"../../Helper/network\";\nimport { Twilio } from \"../../Helper/urls\";\nimport { REQUEST_TYPE } from \"../../constant\";\nconst intialState = {};\n\nconst FETCHING_TWILIO_VIDEO_ACCESS_TOKEN = \"FETCHING_TWILIO_VIDEO_ACCESS_TOKEN\";\nconst FETCHING_TWILIO_VIDEO_ACCESS_TOKEN_COMPLETED =\n  \"FETCHING_TWILIO_VIDEO_ACCESS_TOKEN_COMPLETED\";\nconst FETCHING_TWILIO_VIDEO_ACCESS_TOKEN_COMPLETED_WITH_ERROR =\n  \"FETCHING_TWILIO_VIDEO_ACCESS_TOKEN_COMPLETED_WITH_ERROR\";\n\nconst FETCHING_TWILIO_CHAT_ACCESS_TOKEN = \"FETCHING_TWILIO_CHAT_ACCESS_TOKEN\";\nconst FETCHING_TWILIO_CHAT_ACCESS_TOKEN_COMPLETED =\n  \"FETCHING_TWILIO_CHAT_ACCESS_TOKEN_COMPLETED\";\nconst FETCHING_TWILIO_CHAT_ACCESS_TOKEN_COMPLETED_WITH_ERROR =\n  \"FETCHING_TWILIO_CHAT_ACCESS_TOKEN_COMPLETED_WITH_ERROR\";\n\nconst setTwilioAccessToken = (state, data) => {\n  const { identity = {}, token = {} } = data;\n  return { ...state, identity: identity, videoToken: token };\n};\n\nconst setTwilioChatAccessToken = (state, data) => {\n  const { token = {} } = data;\n  return { ...state, chatToken: token };\n};\n\nexport const fetchVideoAccessToken = userId => {\n  return async dispatch => {\n    try {\n      dispatch({ type: FETCHING_TWILIO_VIDEO_ACCESS_TOKEN });\n      let response = await doRequest({\n        method: REQUEST_TYPE.GET,\n        url: Twilio.getTwilioVideoAccessToken(),\n        params: { userId: userId }\n      });\n\n      const { status, payload } = response;\n\n      if (status === true) {\n        dispatch({\n          type: FETCHING_TWILIO_VIDEO_ACCESS_TOKEN_COMPLETED,\n          payload: payload.data\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: FETCHING_TWILIO_VIDEO_ACCESS_TOKEN_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {}\n  };\n};\n\nexport const fetchChatAccessToken = userId => {\n  return async dispatch => {\n    try {\n      dispatch({ type: FETCHING_TWILIO_CHAT_ACCESS_TOKEN });\n      let response = await doRequest({\n        method: REQUEST_TYPE.GET,\n        url: Twilio.getTwilioChatAccessToken(),\n        params: { identity: userId, device: \"browser\" }\n      });\n\n      const { status, payload } = response;\n\n      if (status === true) {\n        dispatch({\n          type: FETCHING_TWILIO_CHAT_ACCESS_TOKEN_COMPLETED,\n          payload: payload.data\n        });\n      } else if (response.status === false) {\n        dispatch({\n          type: FETCHING_TWILIO_CHAT_ACCESS_TOKEN_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (error) {}\n  };\n};\n\nexport default (state = intialState, action) => {\n  const { type, payload = {} } = action;\n  switch (type) {\n    case FETCHING_TWILIO_VIDEO_ACCESS_TOKEN_COMPLETED: {\n      return setTwilioAccessToken(state, payload);\n    }\n    case FETCHING_TWILIO_CHAT_ACCESS_TOKEN_COMPLETED: {\n      return setTwilioChatAccessToken(state, payload);\n    }\n    default: {\n      return state;\n    }\n  }\n};\n","import { doRequest } from \"../../../Helper/network\";\nimport { User } from \"../../../Helper/urls\";\nimport {\n  REQUEST_TYPE,\n  PROFILE_SETUP_STAGE,\n  USER_CATEGORY\n} from \"../../../constant\";\n\nimport {\n  SIGNING_COMPLETED,\n  SIGNING_UP_COMPLETED,\n  GETTING_INITIAL_DATA_COMPLETED\n} from \"../../auth\";\n\nconst SAVING_USER_CONSENT_FORM = \"SAVING_USER_CONSENT_FORM\";\nconst SAVING_USER_CONSENT_FORM_COMPLETED = \"SAVING_USER_CONSENT_FORM_COMPLETED\";\nconst SAVING_USER_CONSENT_FORM_COMPLETED_WITH_ERROR =\n  \"SAVING_USER_CONSENT_FORM_COMPLETED_WITH_ERROR\";\n\nconst SAVING_USER_ID_PROOF = \"SAVING_USER_ID_PROOF\";\nconst SAVING_USER_ID_PROOF_COMPLETED = \"SAVING_USER_ID_PROOF_COMPLETED\";\nconst SAVING_USER_ID_PROOF_COMPLETED_WITH_ERROR =\n  \"SAVING_USER_ID_PROOF_COMPLETED_WITH_ERROR\";\n\nconst intial_state = {\n  current: PROFILE_SETUP_STAGE.UPLOAD_CONSENT_FORM\n};\n\nexport const saveUserConsentForm = ({ data, onUploadProgress }) => {\n  return async dispatch => {\n    try {\n      dispatch({ type: SAVING_USER_CONSENT_FORM });\n      const response = await doRequest({\n        onUploadProgress: onUploadProgress,\n        method: REQUEST_TYPE.POST,\n        data: data,\n        url: User.getUploadConsentFormURL()\n      });\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({ type: SAVING_USER_CONSENT_FORM_COMPLETED, payload });\n      } else if (status === false) {\n        dispatch({\n          type: SAVING_USER_CONSENT_FORM_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (err) {\n      throw new Error(err);\n    }\n  };\n};\n\nexport const saveUserIdProof = ({ data, onUploadProgress }) => {\n  return async dispatch => {\n    try {\n      dispatch({ type: SAVING_USER_ID_PROOF });\n      let response = await doRequest({\n        onUploadProgress: onUploadProgress,\n        method: REQUEST_TYPE.POST,\n        data: data,\n        url: User.getUploadIdProofURL()\n      });\n      const { status, payload } = response;\n      if (status === true) {\n        dispatch({ type: SAVING_USER_ID_PROOF_COMPLETED, payload });\n      } else if (status === false) {\n        dispatch({\n          type: SAVING_USER_ID_PROOF_COMPLETED_WITH_ERROR,\n          payload: payload.error\n        });\n      }\n    } catch (err) {\n      throw new Error(err);\n    }\n  };\n};\n\nexport default (state = intial_state, action) => {\n  const { type, payload = {} } = action;\n  switch (type) {\n    case SAVING_USER_CONSENT_FORM:\n      return {\n        ...state,\n        is_saving: true,\n        is_saved: false,\n        is_error: false,\n        current: PROFILE_SETUP_STAGE.UPLOAD_CONSENT_FORM,\n        error: {}\n      };\n    case SAVING_USER_CONSENT_FORM_COMPLETED:\n      return {\n        ...state,\n        is_saving: false,\n        is_saved: true,\n        is_error: false,\n        current: PROFILE_SETUP_STAGE.UPLOAD_ID_PROOF,\n        msg: payload.message,\n        error: {}\n      };\n    case SAVING_USER_CONSENT_FORM_COMPLETED_WITH_ERROR:\n      return {\n        ...state,\n        is_saving: false,\n        is_saved: false,\n        is_error: true,\n        current: PROFILE_SETUP_STAGE.UPLOAD_CONSENT_FORM,\n        error: payload\n      };\n    case SAVING_USER_ID_PROOF:\n      return {\n        ...state,\n        is_saving: true,\n        is_saved: false,\n        is_error: false,\n        current: PROFILE_SETUP_STAGE.UPLOAD_ID_PROOF,\n        error: {}\n      };\n    case SAVING_USER_ID_PROOF_COMPLETED:\n      return {\n        ...state,\n        is_saving: false,\n        is_saved: true,\n        is_error: false,\n        current: PROFILE_SETUP_STAGE.SETUP_PROFILE,\n        msg: payload.message,\n        error: {}\n      };\n    case SAVING_USER_ID_PROOF_COMPLETED_WITH_ERROR:\n      return {\n        ...state,\n        is_saving: false,\n        is_saved: false,\n        is_error: true,\n        current: PROFILE_SETUP_STAGE.UPLOAD_ID_PROOF,\n        error: payload\n      };\n    case GETTING_INITIAL_DATA_COMPLETED:\n    case SIGNING_COMPLETED:\n    case SIGNING_UP_COMPLETED: {\n      const { users = {}, authenticatedUser } = payload;\n      const {\n        isConsentFormUploaded,\n        isIdProofUploaded,\n        isProfileCompleted,\n        basicInfo: { category } = {}\n      } = users[authenticatedUser] || {};\n      let current = PROFILE_SETUP_STAGE.DASHBOARD;\n      if (!isConsentFormUploaded && category === USER_CATEGORY.PATIENT)\n        current = PROFILE_SETUP_STAGE.UPLOAD_CONSENT_FORM;\n      else if (!isIdProofUploaded && category === USER_CATEGORY.PATIENT)\n        current = PROFILE_SETUP_STAGE.UPLOAD_ID_PROOF;\n      else if (!isProfileCompleted) current = PROFILE_SETUP_STAGE.SETUP_PROFILE;\n      return { ...state, current };\n    }\n    default:\n      return state;\n  }\n};\n","// import { doRequest } from \"../../Helper/network\";\n// import { User } from \"../../Helper/urls\";\n// import { REQUEST_TYPE } from \"../../constant\";\nconst intialState = {};\n\n// const FETCHING_PRODUCTS_DATA = \"FETCHING_PRODUCTS_DATA\";\n// const FETCHING_PRODUCTS_DATA_COMPLETED = \"FETCHING_PRODUCTS_DATA_COMPLETED\";\n// const FETCHING_PRODUCTS_DATA_COMPLETED_WITH_ERROR =\n//   \"FETCHING_PRODUCTS_DATA_COMPLETED_WITH_ERROR\";\n\n// const FETCHING_PROGRAM_DOCTORS_DATA = \"FETCHING_PROGRAM_DOCTORS_DATA\";\n// const FETCHING_PROGRAM_DOCTORS_DATA_COMPLETED =\n//   \"FETCHING_PROGRAM_DOCTORS_DATA_COMPLETED\";\n// const FETCHING_PROGRAM_DOCTORS_DATA_COMPLETED_WITH_ERROR =\n//   \"FETCHING_PROGRAM_DOCTORS_DATA_COMPLETED_WITH_ERROR\";\n\n// const TOGGLE_ADD_DOCTOR = \"TOGGLE_ADD_DOCTOR\";\n// const TOGGLE_ADD_PATIENT = \"TOGGLE_ADD_PATIENT\";\n\nfunction setProducts(state, data) {\n  const { products } = data;\n  if (products) {\n    // const currentState = Object.assign([], state);\n    // const newState = Object.assign([], currentState, products);\n\n    return { ...state, ...products };\n  } else {\n    return state;\n  }\n}\n\nexport default (state = intialState, action) => {\n  const { type, payload = {} } = action;\n  switch (type) {\n    default:\n      return setProducts(state, payload);\n  }\n};\n","const intialState = {};\n\nfunction setClinicalTestTemplate(state, data) {\n  const { clinicalTestTemplates } = data;\n  if (clinicalTestTemplates) {\n    return { ...state, ...clinicalTestTemplates };\n  } else {\n    return state;\n  }\n}\n\nexport default (state = intialState, action) => {\n  const { type, payload = {} } = action;\n\n  switch (type) {\n    default:\n      return setClinicalTestTemplate(state, payload);\n  }\n};\n","import { FETCHING_CURRENT_PROGRAM_DETAILS_COMPLETED } from \"../../program\";\n\nconst initialState = {};\n\nexport default (state = initialState, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case FETCHING_CURRENT_PROGRAM_DETAILS_COMPLETED:\n      return { id: payload.programId, isLoading: false };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport users from \"./user\";\nimport phone from \"./phone\";\nimport countryCities from \"./countryCity\";\nimport auth from \"./auth\";\nimport editProfile from \"./page/EditProfile\";\nimport changePassword from \"./page/changePassword\";\nimport medicals from \"./medical\";\nimport programs from \"./program\";\nimport products from \"./product\";\nimport medications from \"./medication\";\nimport profileSetUp from \"./page/profileSetup\";\nimport insuranceProviders from \"./insuarnceProvider\";\nimport hospitals from \"./hospital\";\nimport modal from \"./modals\";\nimport events from \"./events\";\nimport surveytemplates from \"./surveyTemplate\";\nimport surveys from \"./survey\";\nimport patientProfile from \"./page/Patientprofile\";\nimport patientResponse from \"./page/patientResponse\";\nimport doctorProfile from \"./page/doctorProfile\";\nimport clinicalTestTemplates from \"./clinicalTestTemplates\";\nimport createSurvey from \"./page/createSurvey\";\nimport successMsg from \"./successMsg\";\nimport programDetails from \"./page/programDetails\";\nimport twilio from \"./twilio\";\nimport articles from \"./articles\";\nconst page = combineReducers({\n  editProfile,\n  changePassword,\n  profileSetUp,\n  patientProfile,\n  doctorProfile,\n  createSurvey,\n  programDetails,\n  patientResponse\n});\n\nexport default combineReducers({\n  users,\n  phone,\n  countryCities,\n  auth,\n  medicals,\n  programs,\n  medications,\n  products,\n  insuranceProviders,\n  page,\n  modal,\n  hospitals,\n  twilio,\n  events,\n  clinicalTestTemplates,\n  successMsg,\n  surveytemplates,\n  surveys,\n  articles\n});\n","import en from \"./en.json\";\nimport ar from \"./ar.json\";\nimport hi from \"./hi.json\";\n\nexport default {\n  en,\n  ar,\n  hi\n};\n","import React, { lazy, Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { IntlProvider, addLocaleData } from \"react-intl\";\nimport arLocaleData from \"react-intl/locale-data/ar\";\nimport esLocaleData from \"react-intl/locale-data/es\";\nimport hiLocalData from \"react-intl/locale-data/hi\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport allReducers from \"./modules\";\nimport translations from \"./i18n/locales\";\n\nimport \"./styles/index.less\";\n\nwindow.CALENDAR_SYNC = process.env.CALENDAR_SYNC;\n\nconst Mobile = lazy(() =>\n  import(/* webpackChunkName: \"MobileWrapper\" */ \"./Mobile/AppWrapper\")\n);\nconst Desktop = lazy(() =>\n  import(/* webpackChunkName: \"DesktopWrapper\" */ \"./AppWrapper\")\n);\n\nlet store;\nif (process.env.NODE_ENV === \"development\") {\n  store = createStore(allReducers, composeWithDevTools(applyMiddleware(thunk)));\n} else {\n  store = createStore(allReducers, applyMiddleware(thunk));\n}\n\naddLocaleData(arLocaleData);\naddLocaleData(esLocaleData);\naddLocaleData(hiLocalData);\n//fecth locale\nconst locale = window.location.search.replace(\"?locale=\", \"\") || \"en\";\nconst messages = translations[locale];\n//\nconst sw = window.screen.width;\nconsole.log(\"window.screen.width ===============>\", window.screen.width);\n\nReactDOM.render(\n  <Provider store={store}>\n    <IntlProvider locale={locale} key={locale} messages={messages}>\n      <Suspense fallback={<div>Loading</div>}>\n        {sw > 1023 ? <Desktop /> : <Mobile />}\n        {/*{<Mobile />}*/}\n      </Suspense>\n    </IntlProvider>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n// registerServiceWorker();\n"],"sourceRoot":""}